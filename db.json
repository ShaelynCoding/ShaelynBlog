{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/css/noscript.styl","path":"css/noscript.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments-buttons.js","path":"js/comments-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/comments.js","path":"js/comments.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/config.js","path":"js/config.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/pjax.js","path":"js/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/pace.js","path":"js/third-party/pace.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/fancybox.js","path":"js/third-party/fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/rating.js","path":"js/third-party/rating.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/quicklink.js","path":"js/third-party/quicklink.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","path":"js/third-party/analytics/google-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","path":"js/third-party/analytics/baidu-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","path":"js/third-party/analytics/growingio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/chatra.js","path":"js/third-party/chat/chatra.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/gitter.js","path":"js/third-party/chat/gitter.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/chat/tidio.js","path":"js/third-party/chat/tidio.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","path":"js/third-party/comments/disqusjs.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/changyan.js","path":"js/third-party/comments/changyan.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/disqus.js","path":"js/third-party/comments/disqus.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","path":"js/third-party/comments/gitalk.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/isso.js","path":"js/third-party/comments/isso.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/livere.js","path":"js/third-party/comments/livere.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/comments/utterances.js","path":"js/third-party/comments/utterances.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/katex.js","path":"js/third-party/math/katex.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/math/mathjax.js","path":"js/third-party/math/mathjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","path":"js/third-party/search/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/search/local-search.js","path":"js/third-party/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","path":"js/third-party/statistics/lean-analytics.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","path":"js/third-party/statistics/firestore.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","path":"js/third-party/tags/mermaid.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/third-party/tags/pdf.js","path":"js/third-party/tags/pdf.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"b6935c63ce0e6f2b50234ff82c5c2bf332c650cb","modified":1647777569987},{"_id":"source/_posts/javaThread.md","hash":"85395b5b3a5e808c675c703e3ea6b9180f6216d1","modified":1649732335858},{"_id":"source/_posts/hexo_blog.md","hash":"4de0de634b0b96beace72e5da9a8aab4e41d7e11","modified":1645104482144},{"_id":"source/_posts/hasCycle.md","hash":"0e5d7fd937196f51675023209bf7736507db8625","modified":1647773618776},{"_id":"source/_posts/network.md","hash":"610b14f1ff89bcb25079e8087828be6778305755","modified":1649077965730},{"_id":"source/categories/index.md","hash":"5690d29fa338ed2d965d51ab17e4d4ef196eb4b0","modified":1645026076607},{"_id":"source/_posts/javaBasis.md","hash":"40cfd90fe4d61a20b13bf24a893bc87687eb07ff","modified":1647834854365},{"_id":"source/_posts/redis.md","hash":"6c29bb99f004f21bc172ac80c60b55a87bd97228","modified":1649145302291},{"_id":"source/_posts/mysql.md","hash":"256ff9b196fe40ff554e1b40b906bdd43aa087de","modified":1649145302291},{"_id":"source/tags/index.md","hash":"36e6c6b0c01f74854010394811648b0b4b1abb5e","modified":1645026076607},{"_id":"source/_posts/spring.md","hash":"84f685ec7522b383bfbc993a5337f6fc8ddb966a","modified":1648474023219},{"_id":"source/_posts/next-permutation.md","hash":"4aacf2717c58e96c13945474c9a079867dbfdab5","modified":1647767787374},{"_id":"source/_posts/jvm.md","hash":"2169b031c5be80fc14e1de49c1b2dfeacca05a7e","modified":1650445603018},{"_id":"source/_posts/javaBasis/error_exception.webp","hash":"19bfa4ca8547a920f846c1ec750e360898ea29f2","modified":1647830296513},{"_id":"source/_posts/javaBasis/compile.png","hash":"fb945794f52d37e25d12ab261f3351d15fa7cebf","modified":1647777461781},{"_id":"source/_posts/jvm/java_heap.png","hash":"df93318f51eebfadb48e8666a8133b8850a8a154","modified":1648385309477},{"_id":"source/_posts/javaBasis/IO.png","hash":"f5bb72ce1b10c6634626191b6fbd8892f405516e","modified":1647829560189},{"_id":"source/_posts/jvm/运行时区域_JDK1.8.png","hash":"bb9b33fe41c127a32b01a1784348d22eaf08d828","modified":1647853277758},{"_id":"source/_posts/next-permutation/step4.png","hash":"359cc4784cb830d8261835f78d19f754fb46df19","modified":1645097989319},{"_id":"source/_posts/next-permutation/step1.png","hash":"f295d9bfc116595d2db710ce8d80650358858fa0","modified":1645097929644},{"_id":"source/_posts/javaBasis/jvm_jdk_jre.png","hash":"abff6b5d3a91d7601ad643cbbfd5461d8e926cf5","modified":1647767360081},{"_id":"source/_posts/next-permutation/step3.png","hash":"3d77d033878dc88345cacfdf589bdbb473c4d1ae","modified":1645097981654},{"_id":"source/_posts/jvm/运行时区域_JDK1.6.png","hash":"1bb8924a02ed3783e3c7b25fc932d10ab19f6d81","modified":1647853277658},{"_id":"source/_posts/next-permutation/step2.png","hash":"f4fb18d46cb5cfbf5f8dca1469823a8d8397bd4c","modified":1645097972356},{"_id":"source/_posts/next-permutation/step5.png","hash":"ae2d6e947fffba50be5abedf248710fe6e16e604","modified":1645097997031},{"_id":"source/_posts/jvm/metaSpace.png","hash":"273e984e9588feece2def18ec2bc73d5c0a03e9a","modified":1647919320241},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1644996150054},{"_id":"themes/next/.gitignore","hash":"417520c4dbbeab9c7e3ab10d944da0886366a0ee","modified":1644996150053},{"_id":"themes/next/_vendors.yml","hash":"0a1212a43ef3ffaa7d6986534469bcd58512d4bd","modified":1644996150055},{"_id":"themes/next/package.json","hash":"18b0af669754282feeb290503072ef91eeedb10d","modified":1644996150083},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1644996150055},{"_id":"themes/next/README.md","hash":"fab15a85d9d8d90ecd8879525b9b74fb1c197978","modified":1644996150054},{"_id":"themes/next/LICENSE.md","hash":"68fc9a03d50fd4b5ea97092b05967d1819dea2c4","modified":1644996150054},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1644996150083},{"_id":"themes/next/_config.yml","hash":"a2f8db78d985d3723bd8a9083fb876b20a10e41f","modified":1645025792393},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1644996150048},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1644996150047},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"21cbff565a0445d3a880fff1ee417e309740a9ab","modified":1644996150049},{"_id":"themes/next/.githooks/install.js","hash":"4d77dbddf2eac1f3fc78f151d12ed22208ed655b","modified":1644996150048},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1644996150047},{"_id":"themes/next/.githooks/pre-commit","hash":"f473eac1aaaa96c947d67988bbed140bbab1a821","modified":1644996150048},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1644996150051},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1644996150050},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"330656d93b6c03df9fb1f2f0e3534c971969473b","modified":1644996150049},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1644996150051},{"_id":"themes/next/.github/release-drafter.yml","hash":"423275ec021104b263cd88776936a8c8d6872b66","modified":1644996150051},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1644996150051},{"_id":"themes/next/.github/labeler.yml","hash":"5c4bc2bd561e6d9b33ee118cc12218c5de46f72d","modified":1644996150051},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1644996150056},{"_id":"themes/next/docs/LICENSE.txt","hash":"f5b14f791b7cfa1d16da981d929152e088a5d1b8","modified":1644996150056},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1644996150058},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1644996150056},{"_id":"themes/next/languages/bn.yml","hash":"b5e2a35eb6fff56b6e32ce479e63b6fc5e44d5cb","modified":1644996150058},{"_id":"themes/next/languages/ar.yml","hash":"bca66db21c015dbd32970d8708b898518a773e1e","modified":1644996150058},{"_id":"themes/next/languages/en.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1644996150059},{"_id":"themes/next/languages/es.yml","hash":"b813da5aed9d73b809133db4dfb08f90ec56afd9","modified":1644996150059},{"_id":"themes/next/languages/default.yml","hash":"814d81c27fed736055ee300e0a6505b26ff4313c","modified":1644996150059},{"_id":"themes/next/languages/de.yml","hash":"4be7b8b76c81bf1853eb36d2e874b17546a0e792","modified":1644996150058},{"_id":"themes/next/languages/it.yml","hash":"c1eeab4992c76bfd436bb205ce58b1cfeef55ee6","modified":1644996150060},{"_id":"themes/next/languages/fa.yml","hash":"6456d40dd42f44101d9d6e7054e9884e9163f948","modified":1644996150059},{"_id":"themes/next/languages/id.yml","hash":"14e794db4eca36b257994d81eb513e61d1edcbd6","modified":1644996150060},{"_id":"themes/next/languages/ja.yml","hash":"d48c4157e0e02e847aac7b513580d3364c81948c","modified":1644996150060},{"_id":"themes/next/languages/ko.yml","hash":"6387357ac2dd498e8b8d630d27050a59180d7e8f","modified":1644996150060},{"_id":"themes/next/languages/fr.yml","hash":"b15dc05afdc94de02e5d3fee4f8d3dc5594dd37e","modified":1644996150059},{"_id":"themes/next/languages/si.yml","hash":"615d18d044f44df476d6bfbf73f7b0edc2632168","modified":1644996150062},{"_id":"themes/next/languages/pt-BR.yml","hash":"a1f27b3a592fc58f17d247f5563ff4a90a3da5f2","modified":1644996150061},{"_id":"themes/next/languages/nl.yml","hash":"ecb8e39c6225f3c068a5fdd569ee7dafd5c41a1f","modified":1644996150060},{"_id":"themes/next/languages/pt.yml","hash":"63a3e1e728ba5e6e22150de7331bb8a654f34960","modified":1644996150061},{"_id":"themes/next/languages/tr.yml","hash":"0bebba73d6f06c7dad61f80c0d7ad5f6f1791a01","modified":1644996150062},{"_id":"themes/next/languages/ru.yml","hash":"8c2b6361f2de17561c1a3eede2bf47b4e2ba6ce5","modified":1644996150061},{"_id":"themes/next/languages/tk.yml","hash":"519239e35c3bda7b62b00ff5d34644f45b16fe6a","modified":1644996150062},{"_id":"themes/next/languages/uk.yml","hash":"7dd24580c0865c5a7bc4d391855045366a598936","modified":1644996150063},{"_id":"themes/next/languages/vi.yml","hash":"c669c34da544a563ceae3e196addc9df6a78e024","modified":1644996150063},{"_id":"themes/next/languages/zh-HK.yml","hash":"f195bb0502ffe66e850077a1af1033455ea65f93","modified":1644996150063},{"_id":"themes/next/languages/zh-TW.yml","hash":"92256b90028de9a1e79c6bc0e5885b93e7fb4b17","modified":1644996150064},{"_id":"themes/next/languages/zh-CN.yml","hash":"5a3ab21210304efef736e96bad254f789f42c567","modified":1644996150063},{"_id":"themes/next/layout/_layout.njk","hash":"20e4160cd0deb4fa272cc3aed0f43520b3cf4a9c","modified":1644996150064},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1644996150083},{"_id":"themes/next/layout/page.njk","hash":"6c40aa438c658eb7f0cd0f6a759f18b43e7e8f93","modified":1644996150082},{"_id":"themes/next/layout/index.njk","hash":"dd63e488ae8cc144335a5958acedf6a16edd7a92","modified":1644996150082},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1644996150149},{"_id":"themes/next/layout/category.njk","hash":"c68b7343d0f8145010f93351908cc36ef6212ec1","modified":1644996150082},{"_id":"themes/next/layout/tag.njk","hash":"9e16ba20c28a7f2c6bc75aa427f48122301a30aa","modified":1644996150083},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1644996150082},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1644996150049},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"44405477660289d4ed9beba1d054b15bb67bba06","modified":1644996150052},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1644996150050},{"_id":"themes/next/.github/ISSUE_TEMPLATE/config.yml","hash":"c40ae7903b6cc99f94c9d45ac7ba8c2850bb1309","modified":1644996150050},{"_id":"themes/next/.github/workflows/linter.yml","hash":"276a91c7179926f410c784c99fa635dc0a016c2d","modified":1644996150052},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"8cc5b5c116f6a052865a324512362f145d699202","modified":1644996150050},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"8b73c439dc796be141d521a4546bcfb7a5485534","modified":1644996150052},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1644996150053},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"a089f7a8368ab0b7d7b9b7ec0ac3767a453435df","modified":1644996150057},{"_id":"themes/next/.github/workflows/lock.yml","hash":"e48d1ced9a673d3f0911a700d3e68c0f4ca79263","modified":1644996150052},{"_id":"themes/next/docs/ru/README.md","hash":"87edab5a3eb7577a409c01df3f1631de40f8956f","modified":1644996150056},{"_id":"themes/next/.github/workflows/tester.yml","hash":"7673a6448808488418418d2351941df0d80b5acc","modified":1644996150053},{"_id":"themes/next/scripts/events/index.js","hash":"1ce12eda88fa5df7e76ec7b78b8463fc6618410c","modified":1644996150084},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1644996150089},{"_id":"themes/next/scripts/filters/locals.js","hash":"9eb5310664759931287dd28ea39165dfb67f12ed","modified":1644996150089},{"_id":"themes/next/scripts/filters/minify.js","hash":"3abdcb715562414063e0fb3eeb6244ce59c477e0","modified":1644996150090},{"_id":"themes/next/scripts/filters/post.js","hash":"ab8bb12e4d55640b1ac4252514468ce37ebcb0b0","modified":1644996150090},{"_id":"themes/next/scripts/helpers/engine.js","hash":"a2ae21ec522c9afd2a8c70f660a586ed0d8b97dc","modified":1644996150090},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a11b71ba0c5012e2cdcab31c15439156b215563e","modified":1644996150091},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"9a07f2d979fc8fe0c5e07d48304187b9b03ea7ff","modified":1644996150091},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1644996150092},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1644996150092},{"_id":"themes/next/scripts/helpers/font.js","hash":"3394185a7f0393c16ce52c8028f90da3e9239c55","modified":1644996150091},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1644996150092},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1644996150093},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"9ed799c329abf830f623689d7e136991256a24ca","modified":1644996150093},{"_id":"themes/next/.github/workflows/stale.yml","hash":"0feb3e1afd1b2dca9dbc7811ce4cf5520e2d186c","modified":1644996150053},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1644996150094},{"_id":"themes/next/scripts/tags/tabs.js","hash":"0eabe51da40b4b13e16419c8fe02452d9a4fef73","modified":1644996150095},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"18a483c2d5afd701f6080ffdddf2d1321370336c","modified":1644996150094},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1644996150094},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"7a06d443f374bd1e84294067a0ac796afd9fbe60","modified":1644996150057},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"4fb01ca650fa8b256b8d48f50dc1b18350bd3d6d","modified":1644996150094},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1644996150096},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1644996150095},{"_id":"themes/next/scripts/tags/pdf.js","hash":"344636b6fd7e27e8831c1e194039afc0d61931cd","modified":1644996150095},{"_id":"themes/next/docs/zh-CN/README.md","hash":"02bafc6ee86263790603861e356596f0c916e392","modified":1644996150057},{"_id":"themes/next/layout/_macro/post.njk","hash":"d0ed41b9b05254e19d051b5f91fdcaa125ee7ca6","modified":1644996150065},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1644996150064},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"eb786e8b35e354287cda345c524cd35ec955f692","modified":1644996150065},{"_id":"themes/next/layout/_partials/comments.njk","hash":"c12f8a7497596441503f2541d2f746f2ee7dd594","modified":1644996150065},{"_id":"themes/next/layout/_partials/footer.njk","hash":"19713f472972caac33ae5fbcfe9105da61257de4","modified":1644996150066},{"_id":"themes/next/layout/_partials/languages.njk","hash":"e43f22198cccb5f6e306b1ce0d28d12a4fb891f8","modified":1644996150068},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"be80b9fe415a9a09d74c28e230995fd292dfc123","modified":1644996150073},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6668878a0f9a1166c6a879755f54a08d942da870","modified":1644996150073},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1644996150069},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"852a750524decf1efa587cd52b09e387ed8315de","modified":1644996150073},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"0efed71ed530447718c4ea5bbd5fc8695b0b0d5f","modified":1644996150079},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"1bcdbc7fde26d6d9ef4e7fa43ffcff5a9506b20e","modified":1644996150079},{"_id":"themes/next/source/css/_colors.styl","hash":"3c6798c10cc220d83481cb3f3782e78558cee789","modified":1644996150097},{"_id":"themes/next/layout/_third-party/fancybox.njk","hash":"844559f46e2ff1c8be234d5763703106e2072a7b","modified":1644996150077},{"_id":"themes/next/layout/_third-party/index.njk","hash":"d41eeb262978e34de4679d8971a9e7ac5d90ecbc","modified":1644996150078},{"_id":"themes/next/layout/_third-party/pace.njk","hash":"d7ad5714079f7f65446f880baf14722435ca9061","modified":1644996150079},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1644996150148},{"_id":"themes/next/source/css/main.styl","hash":"78ce791cc4ac95386cf6839ca72f5f7b51f86ee9","modified":1644996150130},{"_id":"themes/next/test/helpers/font.js","hash":"342ef3c6fd2dcca2a8802a516ed6d7f389fd2ca2","modified":1644996150148},{"_id":"themes/next/source/css/noscript.styl","hash":"76bba5d7916e9930e68215a0fce3a7d81c44510f","modified":1644996150130},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1644996150131},{"_id":"themes/next/test/helpers/next-url.js","hash":"a91d880cb75e0a8e65a7be4c7362b2c8ebfb7c4f","modified":1644996150149},{"_id":"themes/next/source/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1644996150131},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1644996150132},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1644996150132},{"_id":"themes/next/source/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1644996150134},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1644996150132},{"_id":"themes/next/source/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1644996150133},{"_id":"themes/next/source/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1644996150134},{"_id":"themes/next/source/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1644996150134},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1644996150136},{"_id":"themes/next/source/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1644996150135},{"_id":"themes/next/source/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1644996150137},{"_id":"themes/next/source/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1644996150137},{"_id":"themes/next/source/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1644996150137},{"_id":"themes/next/source/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1644996150147},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1644996150150},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1644996150149},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1644996150150},{"_id":"themes/next/test/tags/group-pictures.js","hash":"5c68ae0184f9da6e00ba199f2554d503d8e6da71","modified":1644996150150},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1644996150151},{"_id":"themes/next/test/tags/link-grid.js","hash":"43d298fafb7c45a874b766d443843bd26346e689","modified":1644996150151},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1644996150150},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1644996150151},{"_id":"themes/next/test/tags/mermaid.js","hash":"ab77be5f3c6d9a57c7b9dda6decf1906a736fef9","modified":1644996150151},{"_id":"themes/next/scripts/events/lib/config.js","hash":"c8b59b404f5d2a0b3b5cd1a6c9a10af5f30e43b5","modified":1644996150084},{"_id":"themes/next/test/tags/pdf.js","hash":"fd6ea5123560a90f7e7c1eface23dbe1455db25f","modified":1644996150152},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1644996150152},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"672dce0632af589b7fe47fa45c2094fa013885f7","modified":1644996150085},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1644996150084},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1644996150152},{"_id":"themes/next/test/validate/index.js","hash":"5a95ccc8598667535bd022e988055c0e019f3670","modified":1644996150153},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"299664182f502447c07301461db99bfd6993fdac","modified":1644996150085},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"d987709267a1bc6e5014411e9983d7c49c102c16","modified":1644996150085},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"7fa8701c86485b2fe7324e017101a32417902397","modified":1644996150086},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1644996150086},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"7f71d6b271ba65ff333d5682e7575711d368c0d2","modified":1644996150087},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"7bb7dafdd7f6bca8464b54e17e552ce7f1714195","modified":1644996150087},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1644996150086},{"_id":"themes/next/source/css/_mixins.styl","hash":"32d31cb5a155681c19f5ad0bb56dcb08429f93ef","modified":1644996150121},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"135b87d151055eefdbc711d9e704b112b3214a84","modified":1644996150087},{"_id":"themes/next/scripts/filters/comment/isso.js","hash":"ff8b5b5145220a17d0ecd9508ba9bd2d3b2da47d","modified":1644996150088},{"_id":"themes/next/scripts/filters/comment/utterances.js","hash":"d3bded697bc32dace689d2a6dfb6eb7514169d15","modified":1644996150088},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"5a07d8bb52bc1d51a624ca8db54be144566c306b","modified":1644996150088},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"0ba2bf0266f1fcb8edbd961869f8521b29685c56","modified":1644996150066},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"aff4613756456be26415febc668860fdab8d33c5","modified":1644996150067},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"0682a52927c331eee17f190984ec3b25ee84f305","modified":1644996150066},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"b46f412c0b4f775fd329d50357f722f5d7c1a3ba","modified":1644996150067},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"650de421a8ce4cf685428ffbe0087ff84cbd1356","modified":1644996150067},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1644996150067},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1644996150068},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"8561e4125b227e5134cb058e2a76fb2e5233ca29","modified":1644996150067},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1644996150068},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1644996150068},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"ca2ccf3cf1874c45712f192ad45dea96fbd9920d","modified":1644996150069},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1644996150069},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1644996150070},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1644996150070},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"9fa47e4fb342811da590ee4adc91cf81118c0a39","modified":1644996150070},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"bde2c7356d9362972bde41cc206d5816f8ed714d","modified":1644996150070},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"002b51d0cae3f2e2e008bdc58be90c728282de5b","modified":1644996150071},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"57eca76cfbbe9a65bc2a77f1deebf003ed335673","modified":1644996150071},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"efb2b6f19df02ba5ae623a1f274fff52aed21e6f","modified":1644996150072},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1644996150072},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"661f7acae43f0be694266323320f977d84119abe","modified":1644996150072},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"6215309aee028dcb734452beec448c5afb6c63fc","modified":1644996150074},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"3d8591bb92df77ceb9d5b07bc76da1ca89e5bd76","modified":1644996150072},{"_id":"themes/next/layout/_third-party/analytics/cloudflare.njk","hash":"c978e9efd472c4825f93b83524b11f1c4f7efaab","modified":1644996150074},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"d89066ff53879693f023e540d59c86137172c529","modified":1644996150074},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"8afaa772c390bd9d53a5cff9645ac3168334eb98","modified":1644996150074},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"45477a04cf2b3c077061c8c3ada216c1ae288e0e","modified":1644996150074},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"d7263fca16d0278ccf1f6aa1c6df6902a6344a09","modified":1644996150075},{"_id":"themes/next/layout/_third-party/analytics/microsoft-clarity.njk","hash":"09ffc0b1175e9c11b9329cf8b398123418d7b0eb","modified":1644996150075},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"d1c950f8fbdf85e7a3eae5463767a89e858e8220","modified":1644996150076},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"9375b19a89b7fa9474e558d085af5448d4c5c50c","modified":1644996150076},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"02aab857c27fc103216029be991688b12a73a525","modified":1644996150076},{"_id":"themes/next/layout/_third-party/chat/gitter.njk","hash":"f8cc14b7aa949999a1faaeb7855e2f20b59a386d","modified":1644996150075},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"0749cb6902baecdfd01f779a2a2513f6d2f6a823","modified":1644996150076},{"_id":"themes/next/layout/_third-party/comments/isso.njk","hash":"64cc3bdaf644fd32c0d0a247f29f5b6904da9af3","modified":1644996150077},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"3b13b09fba84ec6000886890a6710736a2b8fafe","modified":1644996150077},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"b63b7e2ede0d3e66e732fa1a06bda9b19e1e85d4","modified":1644996150077},{"_id":"themes/next/layout/_third-party/comments/utterances.njk","hash":"5a94032bc3512a10ad4328fc19ec07b819a1d687","modified":1644996150077},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"abf37fc55aa86702118e8fdf5bf2d389dd589aa0","modified":1644996150078},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"d82c24136bbd3443b85f07f5579845833b594684","modified":1644996150078},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"3677017fd4572b158311f5f5d870590ab25184e0","modified":1644996150078},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"e45ea3542cdc9ed7ec8447b5e6f35df4c5e82758","modified":1644996150080},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"24ed76e0c72a25ac152820c750a05826a706b6f4","modified":1644996150079},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"568ddf7955d11d93fb5e842b403a7ac8b1b7fdb1","modified":1644996150081},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1644996150080},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"d32ebe94560fa95824478ebbff531bffc47b194d","modified":1644996150080},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"2446e748cdc102c78492216319ac02148db7daf6","modified":1644996150081},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"099e031f52fb8e47b3af5b2684737efc9e643ee7","modified":1644996150081},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"2c81984cc4f5123103460442f6e046f5b6c97127","modified":1644996150081},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"96e0a7c2a65ce68215e17e369085b2ea2f1334f2","modified":1644996150128},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1644996150129},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e1fbf169b9b6a194b518240cbd06ec3c48b83d61","modified":1644996150128},{"_id":"themes/next/source/css/_variables/base.styl","hash":"163c7441d777bee87042d475e6ce0fde199add28","modified":1644996150129},{"_id":"themes/next/source/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1644996150138},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1644996150129},{"_id":"themes/next/source/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1644996150144},{"_id":"themes/next/source/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1644996150144},{"_id":"themes/next/source/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1644996150143},{"_id":"themes/next/source/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1644996150144},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"bab653bcf226311381e8411a0492202f1bf1fce9","modified":1644996150098},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1644996150124},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"fd49b521d67eaccc629f77b4e095cb7310327565","modified":1644996150121},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1644996150124},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"8a70d51d8f7cd113e5fbc9f0e70c46a072f282c8","modified":1644996150124},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"944364893bd7160d954c10ba931af641c91515a4","modified":1644996150125},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1644996150125},{"_id":"themes/next/source/css/_common/components/index.styl","hash":"fe1868f47681e00a33a96199302be85377282f63","modified":1644996150098},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1644996150125},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"b741ab96e73370711c63a6581159f2ea8b5bfa1b","modified":1644996150126},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1644996150126},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"d9141e6e14a56b5952488101e9a8388c2170e270","modified":1644996150127},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"90a86045a33c1bae49fc2f6fa1e1b53170c7f77b","modified":1644996150104},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"64775c729512b30b144ab5ae9dc4a4dfd4e13f35","modified":1644996150110},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"4817e77577896ab5c0da434549917ee703a3f4cf","modified":1644996150122},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"72dc825c50357402c342d62ab60fc0c478ab6bc1","modified":1644996150126},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"778ed2ad5643b93970c95626b325defeb586733f","modified":1644996150127},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1644996150128},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1644996150122},{"_id":"themes/next/source/css/_common/outline/index.styl","hash":"8e34df131830d4fa3725e4590a672ba1cf1903e5","modified":1644996150110},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"357b899ac0f0dfbbbebf1ea972030c7cefa463ce","modified":1644996150123},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1644996150123},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"b332868d76d9f1651efd65abfc0d3c9d699b1a45","modified":1644996150123},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1644996150114},{"_id":"themes/next/source/css/_common/scaffolding/index.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1644996150116},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"d0a7c99095f490b0d2ed6b1be43d435960798cec","modified":1644996150114},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1644996150116},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e840b23d33023e6d45e018f6e84b683dd56efd8d","modified":1644996150116},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1644996150120},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"b5c7782368889fa9fd93807d28ff2daf270e3703","modified":1644996150116},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1644996150114},{"_id":"themes/next/source/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1644996150139},{"_id":"themes/next/source/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1644996150140},{"_id":"themes/next/source/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1644996150139},{"_id":"themes/next/source/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1644996150139},{"_id":"themes/next/source/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1644996150140},{"_id":"themes/next/source/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1644996150140},{"_id":"themes/next/source/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1644996150141},{"_id":"themes/next/source/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1644996150141},{"_id":"themes/next/source/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1644996150141},{"_id":"themes/next/source/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1644996150142},{"_id":"themes/next/source/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1644996150142},{"_id":"themes/next/source/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1644996150142},{"_id":"themes/next/source/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1644996150142},{"_id":"themes/next/source/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1644996150143},{"_id":"themes/next/source/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1644996150143},{"_id":"themes/next/source/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1644996150145},{"_id":"themes/next/source/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1644996150145},{"_id":"themes/next/source/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1644996150146},{"_id":"themes/next/source/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1644996150146},{"_id":"themes/next/source/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1644996150146},{"_id":"themes/next/source/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1644996150147},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1644996150099},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1644996150099},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"6b816c2511242ee503fb5f34cd3e4dcdafc06b85","modified":1644996150100},{"_id":"themes/next/source/css/_common/components/pages/index.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1644996150099},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1644996150100},{"_id":"themes/next/source/css/_common/components/post/index.styl","hash":"d0805a763176b3c0003967401644f41dfe3bc9e8","modified":1644996150101},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"ea351936d71e0b6259febac3d7d56d1be6927bf9","modified":1644996150101},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"ec37a36e94ba791663607a5022f763915778578f","modified":1644996150102},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1644996150103},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"1d284f3ea03ba9b4feb76b375e539a8e0bccf1c3","modified":1644996150102},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"fc1a7bac6493f24aa50665574f37f3dd954f210c","modified":1644996150102},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"010c901e4ef49a606f8a350efbf09044e76d2ff3","modified":1644996150103},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"b6677dc2a2368084ab82bb4f145ac79e5966c150","modified":1644996150104},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"07cff69f2d57e6321595f64c16d8b763dc88df6a","modified":1644996150104},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"070737d101e7cd58e997e8c7af09958268c43a21","modified":1644996150105},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"9ac6f477177264c26a46e8333b8456720a0444dc","modified":1644996150103},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"41ed817e1eb64078074e245e771446ee041e5790","modified":1644996150106},{"_id":"themes/next/source/css/_common/components/third-party/disqusjs.styl","hash":"c2326ee3e8b724d99c24a818ddee32813ea5bf89","modified":1644996150105},{"_id":"themes/next/source/css/_common/components/third-party/gitter.styl","hash":"35104dc6883a61c31e0e368dac8ac2f697be62fe","modified":1644996150106},{"_id":"themes/next/source/css/_common/components/third-party/index.styl","hash":"979486a41a81f2a9fd8b0b87c4f87d6416c68c7d","modified":1644996150106},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"e72799ce3f9b79753e365b2f8c8ef6c310668d4a","modified":1644996150107},{"_id":"themes/next/source/css/_common/components/third-party/utterances.styl","hash":"56d90ae0559caa55b75f3c300ff2711f9ed65fc4","modified":1644996150107},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"9d995eb4871a6c273d9d51558676a1fdabf69e72","modified":1644996150106},{"_id":"themes/next/source/css/_common/outline/footer/index.styl","hash":"8b9407e5cfd0571ef8de7df19022b268f962fa2f","modified":1644996150108},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"38c64c2d04e46848382bfa246a0e9c508294767b","modified":1644996150108},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"e74f4bb47a101b014ee2a1783c87f3b87323f9a0","modified":1644996150108},{"_id":"themes/next/source/css/_common/outline/header/index.styl","hash":"650ed4ad6df1b6ff04647e7b6d568304e4d3ed2e","modified":1644996150109},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"392fd53a8dd4e3f33a853ebb24290a622300e0ff","modified":1644996150109},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"bf3ad8b4268f763a1e26377681644887694bc009","modified":1644996150109},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"759e582d34d08e3386c55d87a835a9523608619f","modified":1644996150109},{"_id":"themes/next/source/css/_common/outline/sidebar/index.styl","hash":"cee43480eba028c37d51cb620c2d81486aa24e01","modified":1644996150110},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1644996150111},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"52fc98b1435129eb3edb9293ced9e507741f1350","modified":1644996150111},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"b926e368f702f8686aaa2eb98d3d2e533418958c","modified":1644996150112},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1644996150111},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"021a37cf178440cc341940a299d3bca359996c6b","modified":1644996150113},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1644996150112},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"ee94a1a27090ad24e3ed579093088d97ff96d77d","modified":1644996150112},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"3103b81fc76b59e1e2c161e2c484625c770ed66f","modified":1644996150113},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1644996150115},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"26dd0adfcb1db6df29c6090c8d7e9b5a43583fb0","modified":1644996150113},{"_id":"themes/next/source/css/_common/scaffolding/highlight/index.styl","hash":"f2328caa94645836e06fb39a6a9c9a84ed68a8b5","modified":1644996150115},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"d6418fd2bbfba7b73ddf11ec62db9637fdf5d8af","modified":1644996150117},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"debee14539272fbe3835a7d3853af2230baa3501","modified":1644996150118},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1644996150118},{"_id":"themes/next/source/css/_common/scaffolding/tags/index.styl","hash":"3f76c73a891bbc10679753e702feba9e8a5ffdd2","modified":1644996150118},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"48d35dba575a7c9e8845b16652e76b7d4a4646de","modified":1644996150119},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"7f8a7345e6537a62cd9e9a94c8f7065b541d9b04","modified":1644996150119},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"d27fbf7799695295dd5860a161a13ac4d90c5ba4","modified":1644996150119},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"9b34143aec49e390e18f380026a45096f7477722","modified":1644996150120},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b6654a1d7cf82577d8263faffee8af3ad4a5c0e8","modified":1644996150120},{"_id":"public/atom.xml","hash":"11be9e2f793643e441f5948bf42d2df4c54ad7f2","modified":1650987428949},{"_id":"public/sitemap.xml","hash":"927f964b4b156e403ca867d369987f0ecc3ad2fb","modified":1650987428949},{"_id":"public/categories/index.html","hash":"f876f1c7565d221dcd0b84662153f759e9c9abcd","modified":1650987428949},{"_id":"public/2022/03/30/network/index.html","hash":"abf220588dd9fae2b5a0889ac4b35af5bba252e9","modified":1650987428949},{"_id":"public/2022/04/04/mysql/index.html","hash":"474dab4750956b183cf9e030683d2fa479a96a0a","modified":1650987428949},{"_id":"public/2022/03/27/spring/index.html","hash":"6655600e0bd9494550fd6c53e7321d0ddeea8698","modified":1650987428949},{"_id":"public/2022/04/05/redis/index.html","hash":"9979208759de25ec37462be2f090c1709ece2732","modified":1650987428949},{"_id":"public/tags/index.html","hash":"5db40cad74c794db9d0a2d314310cb06951bc493","modified":1650987428949},{"_id":"public/2020/02/17/hasCycle/index.html","hash":"047ee2aeff9b03af72ae10a808c876aba0cb5748","modified":1650987428949},{"_id":"public/archives/index.html","hash":"89147700cea2341719e25f98d69c6540c66d71da","modified":1650987428949},{"_id":"public/archives/2020/index.html","hash":"cf7ca83f591e3c28165ad85ce7cfb4bb9bc7ced1","modified":1650987428949},{"_id":"public/archives/2020/02/index.html","hash":"bf14cb3478a6136b13827331ce5e42405290fb3a","modified":1650987428949},{"_id":"public/archives/2022/index.html","hash":"e78e3f86c6e01d2dc480967445b9dc044cef798c","modified":1650987428949},{"_id":"public/archives/2022/03/index.html","hash":"d0278db2f1e6040f056074be5a5146cc6075d411","modified":1650987428949},{"_id":"public/archives/2022/04/index.html","hash":"0639e26911117fe37ae3e2a4f564bb74c7ee7d0b","modified":1650987428949},{"_id":"public/categories/java/index.html","hash":"004a0e67147deaad5279fdb1fb69f4578c5a11d5","modified":1650987428949},{"_id":"public/categories/算法/index.html","hash":"8585aca257200e4bb5ea3306acc0a85a7994cd28","modified":1650987428949},{"_id":"public/categories/配置/index.html","hash":"1d68e0df3f730c7a7947138242d9f67f7de9535c","modified":1650987428949},{"_id":"public/categories/DataBase/index.html","hash":"66e666670bc9282c8fde3dfc09bc9d8a9d72c0ca","modified":1650987428949},{"_id":"public/categories/Java/index.html","hash":"f30f711729082a3222b0de7e6dfc8ec9240295ef","modified":1650987428949},{"_id":"public/categories/Java/Redis/index.html","hash":"9164449749c51b64f290d5d754441ac4bab62942","modified":1650987428949},{"_id":"public/categories/spring/index.html","hash":"9dca418b161a60777bf03bb44fe4e93389a0c230","modified":1650987428949},{"_id":"public/tags/Hexo/index.html","hash":"8a4a21a33bb5da456078006ce9d096fb83e517c7","modified":1650987428949},{"_id":"public/2022/03/27/javaThread/index.html","hash":"fb737d22c4ed072247d7358e6d488d87056c8d29","modified":1650987428949},{"_id":"public/2022/03/21/jvm/index.html","hash":"de5e817b17d7988c85a50de01b36385a8ed67604","modified":1650987428949},{"_id":"public/2022/03/16/javaBasis/index.html","hash":"c8a41d2fee7a88337f110a0371c49e7066a003ee","modified":1650987428949},{"_id":"public/2020/02/17/next-permutation/index.html","hash":"c6127d13843e34083e8403367bcd3fc4f1390f4d","modified":1650987428949},{"_id":"public/2020/02/16/hexo_blog/index.html","hash":"781d610fb73b81e573c5adba3266d448958eb155","modified":1650987428949},{"_id":"public/index.html","hash":"eac81439fe17225285b0656af3024270a8fb5b2f","modified":1650987428949},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1650987428949},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1650987428949},{"_id":"public/images/avatar.gif","hash":"2dbc3e2f2d624b2ca1afe6edc2ca17307f1950c8","modified":1650987428949},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1650987428949},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1650987428949},{"_id":"public/images/logo.svg","hash":"2cb74fd3ea2635e015eabc58a8d488aed6cf6417","modified":1650987428949},{"_id":"public/2022/03/16/javaBasis/IO.png","hash":"f5bb72ce1b10c6634626191b6fbd8892f405516e","modified":1650987428949},{"_id":"public/2022/03/16/javaBasis/compile.png","hash":"fb945794f52d37e25d12ab261f3351d15fa7cebf","modified":1650987428949},{"_id":"public/2022/03/16/javaBasis/jvm_jdk_jre.png","hash":"abff6b5d3a91d7601ad643cbbfd5461d8e926cf5","modified":1650987428949},{"_id":"public/2022/03/16/javaBasis/error_exception.webp","hash":"19bfa4ca8547a920f846c1ec750e360898ea29f2","modified":1650987428949},{"_id":"public/2022/03/21/jvm/java_heap.png","hash":"df93318f51eebfadb48e8666a8133b8850a8a154","modified":1650987428949},{"_id":"public/2022/03/21/jvm/运行时区域_JDK1.6.png","hash":"1bb8924a02ed3783e3c7b25fc932d10ab19f6d81","modified":1650987428949},{"_id":"public/2022/03/21/jvm/运行时区域_JDK1.8.png","hash":"bb9b33fe41c127a32b01a1784348d22eaf08d828","modified":1650987428949},{"_id":"public/2020/02/17/next-permutation/step1.png","hash":"f295d9bfc116595d2db710ce8d80650358858fa0","modified":1650987428949},{"_id":"public/2020/02/17/next-permutation/step2.png","hash":"f4fb18d46cb5cfbf5f8dca1469823a8d8397bd4c","modified":1650987428949},{"_id":"public/2020/02/17/next-permutation/step3.png","hash":"3d77d033878dc88345cacfdf589bdbb473c4d1ae","modified":1650987428949},{"_id":"public/2020/02/17/next-permutation/step4.png","hash":"359cc4784cb830d8261835f78d19f754fb46df19","modified":1650987428949},{"_id":"public/2020/02/17/next-permutation/step5.png","hash":"ae2d6e947fffba50be5abedf248710fe6e16e604","modified":1650987428949},{"_id":"public/2022/03/21/jvm/metaSpace.png","hash":"273e984e9588feece2def18ec2bc73d5c0a03e9a","modified":1650987428949},{"_id":"public/css/noscript.css","hash":"54d14cd43dc297950a4a8d39ec9644dd5fc3499f","modified":1650987428949},{"_id":"public/js/bookmark.js","hash":"0f563ffbf05fad30e854e413ab17ff7164ab5a53","modified":1650987428949},{"_id":"public/js/comments-buttons.js","hash":"1a7344440321713426a0b2ab17e276b5bdf85ade","modified":1650987428949},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1650987428949},{"_id":"public/js/comments.js","hash":"66ae2e26ea36a41b72c638ea8b220296638ae952","modified":1650987428949},{"_id":"public/js/next-boot.js","hash":"48497e2156a10155dc42311633a110c9685692c9","modified":1650987428949},{"_id":"public/js/config.js","hash":"4c4ebbe3b3f3841a26f9d5af6d0ba8bc6da01c54","modified":1650987428949},{"_id":"public/js/pjax.js","hash":"919f5281c4a04d11cfd94573ecf57b3dbabd3cc8","modified":1650987428949},{"_id":"public/js/schedule.js","hash":"2b43e2d576a308289880befc27580dbb2aa34439","modified":1650987428949},{"_id":"public/js/utils.js","hash":"e447160d342b1f93df5214b6a733441039ced439","modified":1650987428949},{"_id":"public/js/schemes/muse.js","hash":"9a836d2bcc3defe4bd1ee51f5f4eb7006ebdd41b","modified":1650987428949},{"_id":"public/js/third-party/fancybox.js","hash":"c098d14e65dd170537134358d4b8359ad0539c2c","modified":1650987428949},{"_id":"public/js/third-party/pace.js","hash":"0ef04218b93561ba4d0ff420d556c3d90a756d32","modified":1650987428949},{"_id":"public/js/third-party/analytics/google-analytics.js","hash":"59684383385059dc4f8a1ff85dbbeb703bcdbcb5","modified":1650987428949},{"_id":"public/js/third-party/quicklink.js","hash":"eed02e6fced8e5a653077205d4d4d7834ca71472","modified":1650987428949},{"_id":"public/js/third-party/analytics/baidu-analytics.js","hash":"f629acc46ff40c071ffd31b77d5c7616f0fdd778","modified":1650987428949},{"_id":"public/js/third-party/rating.js","hash":"4e92c2d107ba47b47826829f9668030d5ea9bfb8","modified":1650987428949},{"_id":"public/js/third-party/analytics/growingio.js","hash":"78dd3cf04082b7dbe6246e404b2aa8e726922402","modified":1650987428949},{"_id":"public/js/third-party/chat/chatra.js","hash":"c32180522788c10e51df1803aa6842ef0432ddc9","modified":1650987428949},{"_id":"public/js/third-party/chat/tidio.js","hash":"b0079f6a4601e06ca6fe46e83a2f5af553e9bc3c","modified":1650987428949},{"_id":"public/js/third-party/chat/gitter.js","hash":"cc38c94125f90dadde11b5ebac7d8bf99a1a08a2","modified":1650987428949},{"_id":"public/js/third-party/comments/disqusjs.js","hash":"b6c58f098473b526d6a3cd35655caf34b77f7cff","modified":1650987428949},{"_id":"public/js/third-party/comments/changyan.js","hash":"260d1a77d6a3bb33a579d3e4cca1997003e799b5","modified":1650987428949},{"_id":"public/js/third-party/comments/disqus.js","hash":"e1cc671b0d524864fd445e3ab4ade9ee6d07e565","modified":1650987428949},{"_id":"public/js/third-party/comments/gitalk.js","hash":"0ec038cf83e8ec067534f16a54041e47a3c1e59a","modified":1650987428949},{"_id":"public/js/third-party/comments/utterances.js","hash":"f67f90eb03e284c82da2b8cf2f1e31801813c16d","modified":1650987428949},{"_id":"public/js/third-party/comments/isso.js","hash":"753a873b6f566aff5ba77ca23f91b78eb880ca64","modified":1650987428949},{"_id":"public/js/third-party/comments/livere.js","hash":"2247d88c934c765c43013337860774aaa99f0b31","modified":1650987428949},{"_id":"public/js/third-party/math/mathjax.js","hash":"5c749b9c1c3bb738122d0516211ecff6496d4907","modified":1650987428949},{"_id":"public/js/third-party/math/katex.js","hash":"83c54ee536e487a1031783443fe0cb63b1b4767e","modified":1650987428949},{"_id":"public/js/third-party/search/local-search.js","hash":"45c485f82258d246f37deb66884bd2643323ef3a","modified":1650987428949},{"_id":"public/js/third-party/search/algolia-search.js","hash":"ac401e3736d56a3c9cb85ab885744cce0b813c55","modified":1650987428949},{"_id":"public/js/third-party/statistics/firestore.js","hash":"0960f16107ed61452fb0dffc6ed22dc143de34ef","modified":1650987428949},{"_id":"public/js/third-party/tags/mermaid.js","hash":"3dc4628efa6debd6490fc0ebddff2424a7b319d8","modified":1650987428949},{"_id":"public/js/third-party/statistics/lean-analytics.js","hash":"5a928990856b8e456f0663cf3b6b406733672e39","modified":1650987428949},{"_id":"public/js/third-party/tags/pdf.js","hash":"af78c22f0e61c8c8aa8794e585e0d632c6d4fcb8","modified":1650987428949},{"_id":"public/css/main.css","hash":"40baf95f878c0b6e67bac58f3d51bf992b3707b5","modified":1650987428949}],"Category":[{"name":"java","_id":"cl2gbadmd00040epldyz63c7z"},{"name":"算法","_id":"cl2gbadmg00090epleofubkmn"},{"name":"配置","_id":"cl2gbadmi000d0epl8q3xhw4h"},{"name":"DataBase","_id":"cl2gbadmi000h0epl4phk8ew6"},{"name":"Java","_id":"cl2gbadmj000j0epl2agzamwp"},{"name":"Redis","parent":"cl2gbadmj000j0epl2agzamwp","_id":"cl2gbadmj000l0epl0u916cpc"},{"name":"spring","_id":"cl2gbadmz000s0epl8eyq1qrg"}],"Data":[],"Page":[{"title":"categories","date":"2022-02-16T15:15:20.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2022-02-16 23:15:20\ntype: \"categories\"\nlayout: \"categories\"\n---\n","updated":"2022-02-16T15:41:16.607Z","path":"categories/index.html","comments":1,"_id":"cl2gbadm700000epl7lki3v08","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2022-02-16T15:16:29.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2022-02-16 23:16:29\ntype: \"tags\"\nlayout: \"tags\"\n---\n","updated":"2022-02-16T15:41:16.607Z","path":"tags/index.html","comments":1,"_id":"cl2gbadmb00020epleho907g5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"javaThread","date":"2022-03-27T12:44:57.000Z","_content":"## 线程和进程\n\n\n## 线程的生命周期\n\n## 线程死锁\n\n### 产生死锁的条件\n\n### 避免死锁\n\n## sleep() & wait()\n\n## Thread start() 会调用 run(),  为什么不直接调用run\n\n## synchronized关键字\n\n### 使用方法\n\n### 原理\n\n## 锁优化机制\n\n## 乐观锁 & 悲观锁\n\n## CAS\n\n## 对象头包含的内容\n\n## synchronized & RentreenantLock\n\n### 区别\n\n### RentreenantLock的底层原理\n\n## volatile关键字\n\n## JMM内存模型\n\n## ThreadLocal\n\n## 线程池\n\n**优点**\n\n**submit() & execute()**\n\n**shutDown() & shutDownNow()**\n\n**isTerminated() & isShutDown()**\n\n### ThreadPoolExecutor类型\n\n### ThreadPoolExecutor构造的重要参数\n\n\n\n","source":"_posts/javaThread.md","raw":"---\ntitle: javaThread\ndate: 2022-03-27 20:44:57\ntags:\ncategories:\n  - java\n---\n## 线程和进程\n\n\n## 线程的生命周期\n\n## 线程死锁\n\n### 产生死锁的条件\n\n### 避免死锁\n\n## sleep() & wait()\n\n## Thread start() 会调用 run(),  为什么不直接调用run\n\n## synchronized关键字\n\n### 使用方法\n\n### 原理\n\n## 锁优化机制\n\n## 乐观锁 & 悲观锁\n\n## CAS\n\n## 对象头包含的内容\n\n## synchronized & RentreenantLock\n\n### 区别\n\n### RentreenantLock的底层原理\n\n## volatile关键字\n\n## JMM内存模型\n\n## ThreadLocal\n\n## 线程池\n\n**优点**\n\n**submit() & execute()**\n\n**shutDown() & shutDownNow()**\n\n**isTerminated() & isShutDown()**\n\n### ThreadPoolExecutor类型\n\n### ThreadPoolExecutor构造的重要参数\n\n\n\n","slug":"javaThread","published":1,"updated":"2022-04-12T02:58:55.858Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2gbadma00010epl6jmo34r7","content":"<h2 id=\"线程和进程\"><a href=\"#线程和进程\" class=\"headerlink\" title=\"线程和进程\"></a>线程和进程</h2><h2 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h2><h2 id=\"线程死锁\"><a href=\"#线程死锁\" class=\"headerlink\" title=\"线程死锁\"></a>线程死锁</h2><h3 id=\"产生死锁的条件\"><a href=\"#产生死锁的条件\" class=\"headerlink\" title=\"产生死锁的条件\"></a>产生死锁的条件</h3><h3 id=\"避免死锁\"><a href=\"#避免死锁\" class=\"headerlink\" title=\"避免死锁\"></a>避免死锁</h3><h2 id=\"sleep-amp-wait\"><a href=\"#sleep-amp-wait\" class=\"headerlink\" title=\"sleep() &amp; wait()\"></a>sleep() &amp; wait()</h2><h2 id=\"Thread-start-会调用-run-为什么不直接调用run\"><a href=\"#Thread-start-会调用-run-为什么不直接调用run\" class=\"headerlink\" title=\"Thread start() 会调用 run(),  为什么不直接调用run\"></a>Thread start() 会调用 run(),  为什么不直接调用run</h2><h2 id=\"synchronized关键字\"><a href=\"#synchronized关键字\" class=\"headerlink\" title=\"synchronized关键字\"></a>synchronized关键字</h2><h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><h2 id=\"锁优化机制\"><a href=\"#锁优化机制\" class=\"headerlink\" title=\"锁优化机制\"></a>锁优化机制</h2><h2 id=\"乐观锁-amp-悲观锁\"><a href=\"#乐观锁-amp-悲观锁\" class=\"headerlink\" title=\"乐观锁 &amp; 悲观锁\"></a>乐观锁 &amp; 悲观锁</h2><h2 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h2><h2 id=\"对象头包含的内容\"><a href=\"#对象头包含的内容\" class=\"headerlink\" title=\"对象头包含的内容\"></a>对象头包含的内容</h2><h2 id=\"synchronized-amp-RentreenantLock\"><a href=\"#synchronized-amp-RentreenantLock\" class=\"headerlink\" title=\"synchronized &amp; RentreenantLock\"></a>synchronized &amp; RentreenantLock</h2><h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><h3 id=\"RentreenantLock的底层原理\"><a href=\"#RentreenantLock的底层原理\" class=\"headerlink\" title=\"RentreenantLock的底层原理\"></a>RentreenantLock的底层原理</h3><h2 id=\"volatile关键字\"><a href=\"#volatile关键字\" class=\"headerlink\" title=\"volatile关键字\"></a>volatile关键字</h2><h2 id=\"JMM内存模型\"><a href=\"#JMM内存模型\" class=\"headerlink\" title=\"JMM内存模型\"></a>JMM内存模型</h2><h2 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h2><h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p><strong>优点</strong></p>\n<p><strong>submit() &amp; execute()</strong></p>\n<p><strong>shutDown() &amp; shutDownNow()</strong></p>\n<p><strong>isTerminated() &amp; isShutDown()</strong></p>\n<h3 id=\"ThreadPoolExecutor类型\"><a href=\"#ThreadPoolExecutor类型\" class=\"headerlink\" title=\"ThreadPoolExecutor类型\"></a>ThreadPoolExecutor类型</h3><h3 id=\"ThreadPoolExecutor构造的重要参数\"><a href=\"#ThreadPoolExecutor构造的重要参数\" class=\"headerlink\" title=\"ThreadPoolExecutor构造的重要参数\"></a>ThreadPoolExecutor构造的重要参数</h3>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"线程和进程\"><a href=\"#线程和进程\" class=\"headerlink\" title=\"线程和进程\"></a>线程和进程</h2><h2 id=\"线程的生命周期\"><a href=\"#线程的生命周期\" class=\"headerlink\" title=\"线程的生命周期\"></a>线程的生命周期</h2><h2 id=\"线程死锁\"><a href=\"#线程死锁\" class=\"headerlink\" title=\"线程死锁\"></a>线程死锁</h2><h3 id=\"产生死锁的条件\"><a href=\"#产生死锁的条件\" class=\"headerlink\" title=\"产生死锁的条件\"></a>产生死锁的条件</h3><h3 id=\"避免死锁\"><a href=\"#避免死锁\" class=\"headerlink\" title=\"避免死锁\"></a>避免死锁</h3><h2 id=\"sleep-amp-wait\"><a href=\"#sleep-amp-wait\" class=\"headerlink\" title=\"sleep() &amp; wait()\"></a>sleep() &amp; wait()</h2><h2 id=\"Thread-start-会调用-run-为什么不直接调用run\"><a href=\"#Thread-start-会调用-run-为什么不直接调用run\" class=\"headerlink\" title=\"Thread start() 会调用 run(),  为什么不直接调用run\"></a>Thread start() 会调用 run(),  为什么不直接调用run</h2><h2 id=\"synchronized关键字\"><a href=\"#synchronized关键字\" class=\"headerlink\" title=\"synchronized关键字\"></a>synchronized关键字</h2><h3 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h3><h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><h2 id=\"锁优化机制\"><a href=\"#锁优化机制\" class=\"headerlink\" title=\"锁优化机制\"></a>锁优化机制</h2><h2 id=\"乐观锁-amp-悲观锁\"><a href=\"#乐观锁-amp-悲观锁\" class=\"headerlink\" title=\"乐观锁 &amp; 悲观锁\"></a>乐观锁 &amp; 悲观锁</h2><h2 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h2><h2 id=\"对象头包含的内容\"><a href=\"#对象头包含的内容\" class=\"headerlink\" title=\"对象头包含的内容\"></a>对象头包含的内容</h2><h2 id=\"synchronized-amp-RentreenantLock\"><a href=\"#synchronized-amp-RentreenantLock\" class=\"headerlink\" title=\"synchronized &amp; RentreenantLock\"></a>synchronized &amp; RentreenantLock</h2><h3 id=\"区别\"><a href=\"#区别\" class=\"headerlink\" title=\"区别\"></a>区别</h3><h3 id=\"RentreenantLock的底层原理\"><a href=\"#RentreenantLock的底层原理\" class=\"headerlink\" title=\"RentreenantLock的底层原理\"></a>RentreenantLock的底层原理</h3><h2 id=\"volatile关键字\"><a href=\"#volatile关键字\" class=\"headerlink\" title=\"volatile关键字\"></a>volatile关键字</h2><h2 id=\"JMM内存模型\"><a href=\"#JMM内存模型\" class=\"headerlink\" title=\"JMM内存模型\"></a>JMM内存模型</h2><h2 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h2><h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p><strong>优点</strong></p>\n<p><strong>submit() &amp; execute()</strong></p>\n<p><strong>shutDown() &amp; shutDownNow()</strong></p>\n<p><strong>isTerminated() &amp; isShutDown()</strong></p>\n<h3 id=\"ThreadPoolExecutor类型\"><a href=\"#ThreadPoolExecutor类型\" class=\"headerlink\" title=\"ThreadPoolExecutor类型\"></a>ThreadPoolExecutor类型</h3><h3 id=\"ThreadPoolExecutor构造的重要参数\"><a href=\"#ThreadPoolExecutor构造的重要参数\" class=\"headerlink\" title=\"ThreadPoolExecutor构造的重要参数\"></a>ThreadPoolExecutor构造的重要参数</h3>"},{"title":"Leetcode 141 环形链表","date":"2020-02-17T13:38:46.000Z","_content":"\n## 题目\n给你一个链表的头节点 head ，判断链表中是否有环。\n\n如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。\n\n如果链表中存在环 ，则返回 true 。 否则，返回 false 。\n<!--more-->\n## 算法\n1. 遍历node存入hashset，看是否已存在\n2. 快慢指针\n\n\n\n\n","source":"_posts/hasCycle.md","raw":"---\ntitle: Leetcode 141 环形链表\ndate: 2020-02-17 21:38:46\ntags:\ncategories:\n  - 算法\n---\n\n## 题目\n给你一个链表的头节点 head ，判断链表中是否有环。\n\n如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。\n\n如果链表中存在环 ，则返回 true 。 否则，返回 false 。\n<!--more-->\n## 算法\n1. 遍历node存入hashset，看是否已存在\n2. 快慢指针\n\n\n\n\n","slug":"hasCycle","published":1,"updated":"2022-03-20T10:53:38.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2gbadmc00030eplfah2b5ah","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个链表的头节点 head ，判断链表中是否有环。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p>\n<p>如果链表中存在环 ，则返回 true 。 否则，返回 false 。</p>\n<span id=\"more\"></span>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ol>\n<li>遍历node存入hashset，看是否已存在</li>\n<li>快慢指针</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>给你一个链表的头节点 head ，判断链表中是否有环。</p>\n<p>如果链表中有某个节点，可以通过连续跟踪 next 指针再次到达，则链表中存在环。 为了表示给定链表中的环，评测系统内部使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。注意：pos 不作为参数进行传递 。仅仅是为了标识链表的实际情况。</p>\n<p>如果链表中存在环 ，则返回 true 。 否则，返回 false 。</p>","more":"<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ol>\n<li>遍历node存入hashset，看是否已存在</li>\n<li>快慢指针</li>\n</ol>"},{"title":"Hexo搭建github.io","date":"2020-02-15T16:00:00.000Z","_content":"Hexo搭建github.io创建blog,分为以下四步:\n<!--more-->\n1. github创建repo\n2. Node.js安装\n3. Hexo安装\n4. Hexo主题更换\n\n此处省略第一二步，有时间再补\n\n## Hexo 安装\n1. npm安装hexo\n``` bash\n$ npm install -g hexo-cli\n```\n2. hexo初始化: 命令貌似需要在根目录执行，否则会报错\n``` bash\n$ hexo init blog\n```\n3. 进入blog文件\n``` bash\n$ hexo generate (hexo g)\n$ hexo server (hexo s)\n```\n4. 更新到remote\n``` bash\n$ hexo deploy (hexo d)\n```\n\n## Hexo主题更换\nhexo的主题url: https://hexo.io/themes/ (点主题下方的name可以进入对应的git repo)\n以下拿next举例:\n1. 安装主题\n``` bash\n$ git clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n2. 修改_config.yml\ntheme: next\n\n3. 测试部署\n``` bash\n$ hexo clean\n$ hexo g\n$ hexo s\n$ hexo d\n```\n\n## Hexo设置categories/tags\n\n1. 在根目录下scaffolds/post.md中，添加一行 categories:\n2. new page\n``` bash\n$ hexo new page categories\n$ hexo new page tags\n```\n3. 在categories/index.md最后加\n```\ntype: \"categories\"\nlayout: \"categories\"\n```\ntags同理\n4. 编写md文章的时候，在开头加上categories: 的标签\n```\ntitle: Hexo搭建github.io\ncategories: \n  - 配置\ntags: \n  - Hexo\ndate: 2020-02-16 00:00:00\n```\n## Hexo插入图片\n1. 安装插件\n```bash\n$ npm install hexo-asset-image --save\n```\n2. hexo的配置文件 _config.yml\npost_asset_folder: true\n\n3. 自动生成文章同名文件夹用于存放照片\n```bash\n$ hexo new <file-name>\n```\n4. ","source":"_posts/hexo_blog.md","raw":"---\ntitle: Hexo搭建github.io\ncategories: \n  - 配置\ntags: \n  - Hexo\ndate: 2020-02-16 00:00:00\n---\nHexo搭建github.io创建blog,分为以下四步:\n<!--more-->\n1. github创建repo\n2. Node.js安装\n3. Hexo安装\n4. Hexo主题更换\n\n此处省略第一二步，有时间再补\n\n## Hexo 安装\n1. npm安装hexo\n``` bash\n$ npm install -g hexo-cli\n```\n2. hexo初始化: 命令貌似需要在根目录执行，否则会报错\n``` bash\n$ hexo init blog\n```\n3. 进入blog文件\n``` bash\n$ hexo generate (hexo g)\n$ hexo server (hexo s)\n```\n4. 更新到remote\n``` bash\n$ hexo deploy (hexo d)\n```\n\n## Hexo主题更换\nhexo的主题url: https://hexo.io/themes/ (点主题下方的name可以进入对应的git repo)\n以下拿next举例:\n1. 安装主题\n``` bash\n$ git clone https://github.com/theme-next/hexo-theme-next themes/next\n```\n2. 修改_config.yml\ntheme: next\n\n3. 测试部署\n``` bash\n$ hexo clean\n$ hexo g\n$ hexo s\n$ hexo d\n```\n\n## Hexo设置categories/tags\n\n1. 在根目录下scaffolds/post.md中，添加一行 categories:\n2. new page\n``` bash\n$ hexo new page categories\n$ hexo new page tags\n```\n3. 在categories/index.md最后加\n```\ntype: \"categories\"\nlayout: \"categories\"\n```\ntags同理\n4. 编写md文章的时候，在开头加上categories: 的标签\n```\ntitle: Hexo搭建github.io\ncategories: \n  - 配置\ntags: \n  - Hexo\ndate: 2020-02-16 00:00:00\n```\n## Hexo插入图片\n1. 安装插件\n```bash\n$ npm install hexo-asset-image --save\n```\n2. hexo的配置文件 _config.yml\npost_asset_folder: true\n\n3. 自动生成文章同名文件夹用于存放照片\n```bash\n$ hexo new <file-name>\n```\n4. ","slug":"hexo_blog","published":1,"updated":"2022-02-17T13:28:02.144Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2gbadme00050epl1cao9829","content":"<p>Hexo搭建github.io创建blog,分为以下四步:</p>\n<span id=\"more\"></span>\n<ol>\n<li>github创建repo</li>\n<li>Node.js安装</li>\n<li>Hexo安装</li>\n<li>Hexo主题更换</li>\n</ol>\n<p>此处省略第一二步，有时间再补</p>\n<h2 id=\"Hexo-安装\"><a href=\"#Hexo-安装\" class=\"headerlink\" title=\"Hexo 安装\"></a>Hexo 安装</h2><ol>\n<li>npm安装hexo<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>\n<li>hexo初始化: 命令貌似需要在根目录执行，否则会报错<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br></pre></td></tr></table></figure></li>\n<li>进入blog文件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate (hexo g)</span><br><span class=\"line\">$ hexo server (hexo s)</span><br></pre></td></tr></table></figure></li>\n<li>更新到remote<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy (hexo d)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Hexo主题更换\"><a href=\"#Hexo主题更换\" class=\"headerlink\" title=\"Hexo主题更换\"></a>Hexo主题更换</h2><p>hexo的主题url: <a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a> (点主题下方的name可以进入对应的git repo)<br>以下拿next举例:</p>\n<ol>\n<li><p>安装主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li>\n<li><p>修改_config.yml<br>theme: next</p>\n</li>\n<li><p>测试部署</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo s</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Hexo设置categories-tags\"><a href=\"#Hexo设置categories-tags\" class=\"headerlink\" title=\"Hexo设置categories/tags\"></a>Hexo设置categories/tags</h2><ol>\n<li><p>在根目录下scaffolds/post.md中，添加一行 categories:</p>\n</li>\n<li><p>new page</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure></li>\n<li><p>在categories/index.md最后加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">layout: &quot;categories&quot;</span><br></pre></td></tr></table></figure>\n<p>tags同理</p>\n</li>\n<li><p>编写md文章的时候，在开头加上categories: 的标签</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hexo搭建github.io</span><br><span class=\"line\">categories: </span><br><span class=\"line\">  - 配置</span><br><span class=\"line\">tags: </span><br><span class=\"line\">  - Hexo</span><br><span class=\"line\">date: 2020-02-16 00:00:00</span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo插入图片\"><a href=\"#Hexo插入图片\" class=\"headerlink\" title=\"Hexo插入图片\"></a>Hexo插入图片</h2></li>\n<li><p>安装插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li>\n<li><p>hexo的配置文件 _config.yml<br>post_asset_folder: true</p>\n</li>\n<li><p>自动生成文章同名文件夹用于存放照片</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &lt;file-name&gt;</span><br></pre></td></tr></table></figure></li>\n<li></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>Hexo搭建github.io创建blog,分为以下四步:</p>","more":"<ol>\n<li>github创建repo</li>\n<li>Node.js安装</li>\n<li>Hexo安装</li>\n<li>Hexo主题更换</li>\n</ol>\n<p>此处省略第一二步，有时间再补</p>\n<h2 id=\"Hexo-安装\"><a href=\"#Hexo-安装\" class=\"headerlink\" title=\"Hexo 安装\"></a>Hexo 安装</h2><ol>\n<li>npm安装hexo<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></li>\n<li>hexo初始化: 命令貌似需要在根目录执行，否则会报错<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init blog</span><br></pre></td></tr></table></figure></li>\n<li>进入blog文件<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate (hexo g)</span><br><span class=\"line\">$ hexo server (hexo s)</span><br></pre></td></tr></table></figure></li>\n<li>更新到remote<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy (hexo d)</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Hexo主题更换\"><a href=\"#Hexo主题更换\" class=\"headerlink\" title=\"Hexo主题更换\"></a>Hexo主题更换</h2><p>hexo的主题url: <a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a> (点主题下方的name可以进入对应的git repo)<br>以下拿next举例:</p>\n<ol>\n<li><p>安装主题</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li>\n<li><p>修改_config.yml<br>theme: next</p>\n</li>\n<li><p>测试部署</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g</span><br><span class=\"line\">$ hexo s</span><br><span class=\"line\">$ hexo d</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"Hexo设置categories-tags\"><a href=\"#Hexo设置categories-tags\" class=\"headerlink\" title=\"Hexo设置categories/tags\"></a>Hexo设置categories/tags</h2><ol>\n<li><p>在根目录下scaffolds/post.md中，添加一行 categories:</p>\n</li>\n<li><p>new page</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new page categories</span><br><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure></li>\n<li><p>在categories/index.md最后加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">layout: &quot;categories&quot;</span><br></pre></td></tr></table></figure>\n<p>tags同理</p>\n</li>\n<li><p>编写md文章的时候，在开头加上categories: 的标签</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: Hexo搭建github.io</span><br><span class=\"line\">categories: </span><br><span class=\"line\">  - 配置</span><br><span class=\"line\">tags: </span><br><span class=\"line\">  - Hexo</span><br><span class=\"line\">date: 2020-02-16 00:00:00</span><br></pre></td></tr></table></figure>\n<h2 id=\"Hexo插入图片\"><a href=\"#Hexo插入图片\" class=\"headerlink\" title=\"Hexo插入图片\"></a>Hexo插入图片</h2></li>\n<li><p>安装插件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure></li>\n<li><p>hexo的配置文件 _config.yml<br>post_asset_folder: true</p>\n</li>\n<li><p>自动生成文章同名文件夹用于存放照片</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new &lt;file-name&gt;</span><br></pre></td></tr></table></figure></li>\n<li></li>\n</ol>"},{"title":"Java基础知识","date":"2022-03-16T12:08:22.000Z","_content":"\n## Java语言特点\n- 面向对象（封装，继承，多态）\n- 平台无关性，一次编写，随处运行(Write once, run anywhere) -> 跨平台；保证这一点的正是JVM机制\n- 支持多线程（C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）\n- 编译与解释并存\n<!--more-->\n\n## 比较需要关注的方面:\n- jvm 内存区域/垃圾回收\n- 类加载过程 class loader\n- 反射/泛型/lamda\n- IO/NIO\n- 解释执行/动态编译\n\n## JVM、JDK、JRE的区别\nJVM：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。\n\nJRE： Java Runtime Environment, Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。\n\nJDK: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。\n\n![JVM、JDK和JRE](jvm_jdk_jre.png)\n\n## Java源代码运行过程\n字节码: JVM可以理解的代码，即扩展名为.class的文件。（java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点）\n![compile](compile.png)\n\nJVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT（just-in-time compilation） 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。\n\n我们可以将高级编程语言按照程序的执行方式分为两种：\n\n**编译型** ：编译型语言 会通过编译器将源代码**一次性翻译**成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。\n\n**解释型** ：解释型语言会通过解释器**一句一句**的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。\n\n**Java 语言既具有编译型语言的特征，也具有解释型语言的特征**。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（.class 文件），这种字节码必须由 Java 解释器来解释执行。\n\n## 自动拆箱/封箱\n装箱：将基本类型用它们对应的引用类型包装起来；\n拆箱：将包装类型转换为基本数据类型；\n装箱其实就是调用了包装类的`valueOf()`方法，拆箱其实就是调用了`xxxValue()`方法。\n`Integer i = 10` 等价于 `Integer i = Integer.valueOf(10)`\n`int n = i` 等价于 `int n = i.intValue()`;\n**如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。**\n\n## 面向对象三大特征\n1. 封装\n封装是指把*一个对象的状态信息（也就是属性）*隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界*访问的方法*来操作属性。\n\n2. 继承\n不同类型的对象，相互之间经常有一定数量的共同点。同时，每一个对象还定义了额外的特性使得他们与众不同。\n继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。\n\n- 子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。\n- 子类可以拥有自己属性和方法，即子类可以对父类进行扩展。\n- 子类可以用自己的方式实现父类的方法\n\n3. 多态\n通俗来说，就是多种形态，具体点就是去完成某个行为，当不同的对象去完成时会产生出不同的状态。\n允许将子类类型的指针赋值给父类类型的指针，把不同的子类对象都当作父类来看。\n- 两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）\n- 多态存在的三个必要条件：继承；重写；父类引用指向子类对象：Parent p = new Child();\n\n**重载 overload** 编译时多态，方法名相同，参数列表（类型/个数）不同\n\n**重写 override** 运行时多态，重写要求子类被重写方法与父类被重写方法有相同的返回类型，不能比父类被重写方法声明更多的异常\n\n## 接口 interface和抽象类 abstract class有什么共同点和区别？\n接口是对行为的抽象，它是抽象方法的集合，利用接口可以达到 API 定义和实现分离的目的。\n共同点 ：\n- 都不能被实例化。\n- 都可以包含抽象方法。\n- 都可以有默认实现的方法（Java 8 可以用 default 关键在接口中定义默认方法）。\n\n区别 ：\n- 接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系（比如说我们抽象了一个发送短信的抽象类，）。\n- 一个类只能继承一个类，但是可以实现多个接口。\n- 接口中的成员变量只能是`public static final`类型的，不能被修改且必须有初始值，而抽象类的成员变量默认`default`，可在子类中被重新定义，也可被重新赋值。\n\n## final 关键字有什么作用？\nfinal 表示不可变的意思，可用于修饰类、属性和方法：\n- 被 final 修饰的类不可以被继承, 如String\n\n- 被 final 修饰的方法不可以被重写\n\n- 被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。\n\n## java中创建对象的方式\n- new 创建新对象\n- 通过反射机制\n- 采用 clone 机制\n- 通过序列化机制\n\n## String、StringBuffer、StringBuilder 的区别？\nString：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。\nStringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。\nStringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。\n>在循环内使用“+”进行字符串的拼接的话，存在比较明显的缺陷：编译器不会创建单个 StringBuilder 以复用，StringBuilder 对象是在循环内部被创建的，这意味着每循环一次就会创建一个 StringBuilder 对象。\n\n**String 为什么是不可变的?**\n- 保存字符串的数组被 final 修饰且为私有的，并且String 类没有提供/暴露修改这个字符串的方法。\n- String 类被 final 修饰导致其不能被继承，进而避免了子类破坏 String 不可变。\n\n## Exception/Error\n在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable 类有两个重要的子类:\n\nException :程序本身可以处理的异常，可以通过 catch 来进行捕获。Exception 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。\n\n\n![Error和Exception](error_exception.webp)\n\n**Checked Exception** 即受检查异常，Java 代码在编译过程中，如果受检查异常没有被 catch/throw 处理的话，就没办法通过编译 。\n>除了RuntimeException及其子类以外，其他的Exception类及其子类都属于受检查异常 。常见的受检查异常有： IO 相关的异常、ClassNotFoundException 、SQLException)\n\n**Unchecked Exception** 即 不受检查异常 ，Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。\n\n>RuntimeException 及其子类都统称为非受检查异常，例如：NullPointerException、NumberFormatException（字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等)\n\nError ：Error 属于程序无法处理的错误 ，不建议通过catch捕获 。例如Java 虚拟机运行错误（Virtual MachineError）、虚拟机内存不够错误(OutOfMemoryError)、类定义错误（NoClassDefFoundError）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。\n\n## ==和equals的区别\n== 对于基本类型和引用类型的作用效果是不同的:\n- 对于基本数据类型来说，==比较的是值\n- 对于引用数据类型来说，==比较的是对象的内存地址\n> 因为java只有值传递，所有对于==而言，不管是比较基本数据类型还是引用数据类型，本质都是比较值，只是引用类型变量存的值是对象的地址\n`equals`的比较：\n1. 类没有覆盖`equals()`方法，等价于==，使用的默认是Object类equals()方法\n2. 类覆盖了`equals()`方法，一般都会覆盖`equals()`方法来比较两个对象的值是否相等，如String\n### equals() / hashcode()\n- 如果两个对象的hashCode 值相等，那这两个对象不一定相等（哈希碰撞）。 \n- 如果两个对象的hashCode 值相等并且equals()方法返回 true，我们才认为这两个对象相等。 \n- 如果两个对象的hashCode 值不相等，我们就可以直接认为这两个对象不相等。\n\n## Java 中 IO 流\n- 按照流的流向分，可以分为输入流和输出流；\n- 按照操作单元划分，可以划分为字节流和字符流；\n- 按照流的角色划分为节点流和处理流。\n\nJava IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的:\nInputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。\nOutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。\n\n按操作方式分类结构图：\n\n\n![Java IO](IO.png)\n\n## 既然有了字节流,为什么还要有字符流?\n>问题本质想问：不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？\n\n回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。\n\n## 泛型\n\n## 序列化","source":"_posts/javaBasis.md","raw":"---\ntitle: Java基础知识\ndate: 2022-03-16 20:08:22\ntags:\ncategories:\n  - java\n---\n\n## Java语言特点\n- 面向对象（封装，继承，多态）\n- 平台无关性，一次编写，随处运行(Write once, run anywhere) -> 跨平台；保证这一点的正是JVM机制\n- 支持多线程（C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）\n- 编译与解释并存\n<!--more-->\n\n## 比较需要关注的方面:\n- jvm 内存区域/垃圾回收\n- 类加载过程 class loader\n- 反射/泛型/lamda\n- IO/NIO\n- 解释执行/动态编译\n\n## JVM、JDK、JRE的区别\nJVM：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。\n\nJRE： Java Runtime Environment, Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。\n\nJDK: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。\n\n![JVM、JDK和JRE](jvm_jdk_jre.png)\n\n## Java源代码运行过程\n字节码: JVM可以理解的代码，即扩展名为.class的文件。（java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点）\n![compile](compile.png)\n\nJVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT（just-in-time compilation） 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。\n\n我们可以将高级编程语言按照程序的执行方式分为两种：\n\n**编译型** ：编译型语言 会通过编译器将源代码**一次性翻译**成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。\n\n**解释型** ：解释型语言会通过解释器**一句一句**的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。\n\n**Java 语言既具有编译型语言的特征，也具有解释型语言的特征**。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（.class 文件），这种字节码必须由 Java 解释器来解释执行。\n\n## 自动拆箱/封箱\n装箱：将基本类型用它们对应的引用类型包装起来；\n拆箱：将包装类型转换为基本数据类型；\n装箱其实就是调用了包装类的`valueOf()`方法，拆箱其实就是调用了`xxxValue()`方法。\n`Integer i = 10` 等价于 `Integer i = Integer.valueOf(10)`\n`int n = i` 等价于 `int n = i.intValue()`;\n**如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。**\n\n## 面向对象三大特征\n1. 封装\n封装是指把*一个对象的状态信息（也就是属性）*隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界*访问的方法*来操作属性。\n\n2. 继承\n不同类型的对象，相互之间经常有一定数量的共同点。同时，每一个对象还定义了额外的特性使得他们与众不同。\n继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。\n\n- 子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。\n- 子类可以拥有自己属性和方法，即子类可以对父类进行扩展。\n- 子类可以用自己的方式实现父类的方法\n\n3. 多态\n通俗来说，就是多种形态，具体点就是去完成某个行为，当不同的对象去完成时会产生出不同的状态。\n允许将子类类型的指针赋值给父类类型的指针，把不同的子类对象都当作父类来看。\n- 两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）\n- 多态存在的三个必要条件：继承；重写；父类引用指向子类对象：Parent p = new Child();\n\n**重载 overload** 编译时多态，方法名相同，参数列表（类型/个数）不同\n\n**重写 override** 运行时多态，重写要求子类被重写方法与父类被重写方法有相同的返回类型，不能比父类被重写方法声明更多的异常\n\n## 接口 interface和抽象类 abstract class有什么共同点和区别？\n接口是对行为的抽象，它是抽象方法的集合，利用接口可以达到 API 定义和实现分离的目的。\n共同点 ：\n- 都不能被实例化。\n- 都可以包含抽象方法。\n- 都可以有默认实现的方法（Java 8 可以用 default 关键在接口中定义默认方法）。\n\n区别 ：\n- 接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系（比如说我们抽象了一个发送短信的抽象类，）。\n- 一个类只能继承一个类，但是可以实现多个接口。\n- 接口中的成员变量只能是`public static final`类型的，不能被修改且必须有初始值，而抽象类的成员变量默认`default`，可在子类中被重新定义，也可被重新赋值。\n\n## final 关键字有什么作用？\nfinal 表示不可变的意思，可用于修饰类、属性和方法：\n- 被 final 修饰的类不可以被继承, 如String\n\n- 被 final 修饰的方法不可以被重写\n\n- 被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。\n\n## java中创建对象的方式\n- new 创建新对象\n- 通过反射机制\n- 采用 clone 机制\n- 通过序列化机制\n\n## String、StringBuffer、StringBuilder 的区别？\nString：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。\nStringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。\nStringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。\n>在循环内使用“+”进行字符串的拼接的话，存在比较明显的缺陷：编译器不会创建单个 StringBuilder 以复用，StringBuilder 对象是在循环内部被创建的，这意味着每循环一次就会创建一个 StringBuilder 对象。\n\n**String 为什么是不可变的?**\n- 保存字符串的数组被 final 修饰且为私有的，并且String 类没有提供/暴露修改这个字符串的方法。\n- String 类被 final 修饰导致其不能被继承，进而避免了子类破坏 String 不可变。\n\n## Exception/Error\n在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable 类有两个重要的子类:\n\nException :程序本身可以处理的异常，可以通过 catch 来进行捕获。Exception 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。\n\n\n![Error和Exception](error_exception.webp)\n\n**Checked Exception** 即受检查异常，Java 代码在编译过程中，如果受检查异常没有被 catch/throw 处理的话，就没办法通过编译 。\n>除了RuntimeException及其子类以外，其他的Exception类及其子类都属于受检查异常 。常见的受检查异常有： IO 相关的异常、ClassNotFoundException 、SQLException)\n\n**Unchecked Exception** 即 不受检查异常 ，Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。\n\n>RuntimeException 及其子类都统称为非受检查异常，例如：NullPointerException、NumberFormatException（字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等)\n\nError ：Error 属于程序无法处理的错误 ，不建议通过catch捕获 。例如Java 虚拟机运行错误（Virtual MachineError）、虚拟机内存不够错误(OutOfMemoryError)、类定义错误（NoClassDefFoundError）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。\n\n## ==和equals的区别\n== 对于基本类型和引用类型的作用效果是不同的:\n- 对于基本数据类型来说，==比较的是值\n- 对于引用数据类型来说，==比较的是对象的内存地址\n> 因为java只有值传递，所有对于==而言，不管是比较基本数据类型还是引用数据类型，本质都是比较值，只是引用类型变量存的值是对象的地址\n`equals`的比较：\n1. 类没有覆盖`equals()`方法，等价于==，使用的默认是Object类equals()方法\n2. 类覆盖了`equals()`方法，一般都会覆盖`equals()`方法来比较两个对象的值是否相等，如String\n### equals() / hashcode()\n- 如果两个对象的hashCode 值相等，那这两个对象不一定相等（哈希碰撞）。 \n- 如果两个对象的hashCode 值相等并且equals()方法返回 true，我们才认为这两个对象相等。 \n- 如果两个对象的hashCode 值不相等，我们就可以直接认为这两个对象不相等。\n\n## Java 中 IO 流\n- 按照流的流向分，可以分为输入流和输出流；\n- 按照操作单元划分，可以划分为字节流和字符流；\n- 按照流的角色划分为节点流和处理流。\n\nJava IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的:\nInputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。\nOutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。\n\n按操作方式分类结构图：\n\n\n![Java IO](IO.png)\n\n## 既然有了字节流,为什么还要有字符流?\n>问题本质想问：不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？\n\n回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。\n\n## 泛型\n\n## 序列化","slug":"javaBasis","published":1,"updated":"2022-03-21T03:54:14.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2gbadmf00060epl60pp4bss","content":"<h2 id=\"Java语言特点\"><a href=\"#Java语言特点\" class=\"headerlink\" title=\"Java语言特点\"></a>Java语言特点</h2><ul>\n<li>面向对象（封装，继承，多态）</li>\n<li>平台无关性，一次编写，随处运行(Write once, run anywhere) -&gt; 跨平台；保证这一点的正是JVM机制</li>\n<li>支持多线程（C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）</li>\n<li>编译与解释并存<span id=\"more\"></span></li>\n</ul>\n<h2 id=\"比较需要关注的方面\"><a href=\"#比较需要关注的方面\" class=\"headerlink\" title=\"比较需要关注的方面:\"></a>比较需要关注的方面:</h2><ul>\n<li>jvm 内存区域/垃圾回收</li>\n<li>类加载过程 class loader</li>\n<li>反射/泛型/lamda</li>\n<li>IO/NIO</li>\n<li>解释执行/动态编译</li>\n</ul>\n<h2 id=\"JVM、JDK、JRE的区别\"><a href=\"#JVM、JDK、JRE的区别\" class=\"headerlink\" title=\"JVM、JDK、JRE的区别\"></a>JVM、JDK、JRE的区别</h2><p>JVM：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。</p>\n<p>JRE： Java Runtime Environment, Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。</p>\n<p>JDK: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。</p>\n<p><img src=\"/2022/03/16/javaBasis/jvm_jdk_jre.png\" alt=\"JVM、JDK和JRE\"></p>\n<h2 id=\"Java源代码运行过程\"><a href=\"#Java源代码运行过程\" class=\"headerlink\" title=\"Java源代码运行过程\"></a>Java源代码运行过程</h2><p>字节码: JVM可以理解的代码，即扩展名为.class的文件。（java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点）<br><img src=\"/2022/03/16/javaBasis/compile.png\" alt=\"compile\"></p>\n<p>JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT（just-in-time compilation） 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。</p>\n<p>我们可以将高级编程语言按照程序的执行方式分为两种：</p>\n<p><strong>编译型</strong> ：编译型语言 会通过编译器将源代码<strong>一次性翻译</strong>成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。</p>\n<p><strong>解释型</strong> ：解释型语言会通过解释器<strong>一句一句</strong>的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。</p>\n<p><strong>Java 语言既具有编译型语言的特征，也具有解释型语言的特征</strong>。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（.class 文件），这种字节码必须由 Java 解释器来解释执行。</p>\n<h2 id=\"自动拆箱-封箱\"><a href=\"#自动拆箱-封箱\" class=\"headerlink\" title=\"自动拆箱/封箱\"></a>自动拆箱/封箱</h2><p>装箱：将基本类型用它们对应的引用类型包装起来；<br>拆箱：将包装类型转换为基本数据类型；<br>装箱其实就是调用了包装类的<code>valueOf()</code>方法，拆箱其实就是调用了<code>xxxValue()</code>方法。<br><code>Integer i = 10</code> 等价于 <code>Integer i = Integer.valueOf(10)</code><br><code>int n = i</code> 等价于 <code>int n = i.intValue()</code>;<br><strong>如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。</strong></p>\n<h2 id=\"面向对象三大特征\"><a href=\"#面向对象三大特征\" class=\"headerlink\" title=\"面向对象三大特征\"></a>面向对象三大特征</h2><ol>\n<li><p>封装<br>封装是指把<em>一个对象的状态信息（也就是属性）</em>隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界<em>访问的方法</em>来操作属性。</p>\n</li>\n<li><p>继承<br>不同类型的对象，相互之间经常有一定数量的共同点。同时，每一个对象还定义了额外的特性使得他们与众不同。<br>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。</p>\n</li>\n</ol>\n<ul>\n<li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。</li>\n<li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li>\n<li>子类可以用自己的方式实现父类的方法</li>\n</ul>\n<ol start=\"3\">\n<li>多态<br>通俗来说，就是多种形态，具体点就是去完成某个行为，当不同的对象去完成时会产生出不同的状态。<br>允许将子类类型的指针赋值给父类类型的指针，把不同的子类对象都当作父类来看。</li>\n</ol>\n<ul>\n<li>两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）</li>\n<li>多态存在的三个必要条件：继承；重写；父类引用指向子类对象：Parent p = new Child();</li>\n</ul>\n<p><strong>重载 overload</strong> 编译时多态，方法名相同，参数列表（类型/个数）不同</p>\n<p><strong>重写 override</strong> 运行时多态，重写要求子类被重写方法与父类被重写方法有相同的返回类型，不能比父类被重写方法声明更多的异常</p>\n<h2 id=\"接口-interface和抽象类-abstract-class有什么共同点和区别？\"><a href=\"#接口-interface和抽象类-abstract-class有什么共同点和区别？\" class=\"headerlink\" title=\"接口 interface和抽象类 abstract class有什么共同点和区别？\"></a>接口 interface和抽象类 abstract class有什么共同点和区别？</h2><p>接口是对行为的抽象，它是抽象方法的集合，利用接口可以达到 API 定义和实现分离的目的。<br>共同点 ：</p>\n<ul>\n<li>都不能被实例化。</li>\n<li>都可以包含抽象方法。</li>\n<li>都可以有默认实现的方法（Java 8 可以用 default 关键在接口中定义默认方法）。</li>\n</ul>\n<p>区别 ：</p>\n<ul>\n<li>接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系（比如说我们抽象了一个发送短信的抽象类，）。</li>\n<li>一个类只能继承一个类，但是可以实现多个接口。</li>\n<li>接口中的成员变量只能是<code>public static final</code>类型的，不能被修改且必须有初始值，而抽象类的成员变量默认<code>default</code>，可在子类中被重新定义，也可被重新赋值。</li>\n</ul>\n<h2 id=\"final-关键字有什么作用？\"><a href=\"#final-关键字有什么作用？\" class=\"headerlink\" title=\"final 关键字有什么作用？\"></a>final 关键字有什么作用？</h2><p>final 表示不可变的意思，可用于修饰类、属性和方法：</p>\n<ul>\n<li><p>被 final 修饰的类不可以被继承, 如String</p>\n</li>\n<li><p>被 final 修饰的方法不可以被重写</p>\n</li>\n<li><p>被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。</p>\n</li>\n</ul>\n<h2 id=\"java中创建对象的方式\"><a href=\"#java中创建对象的方式\" class=\"headerlink\" title=\"java中创建对象的方式\"></a>java中创建对象的方式</h2><ul>\n<li>new 创建新对象</li>\n<li>通过反射机制</li>\n<li>采用 clone 机制</li>\n<li>通过序列化机制</li>\n</ul>\n<h2 id=\"String、StringBuffer、StringBuilder-的区别？\"><a href=\"#String、StringBuffer、StringBuilder-的区别？\" class=\"headerlink\" title=\"String、StringBuffer、StringBuilder 的区别？\"></a>String、StringBuffer、StringBuilder 的区别？</h2><p>String：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。<br>StringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。<br>StringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。</p>\n<blockquote>\n<p>在循环内使用“+”进行字符串的拼接的话，存在比较明显的缺陷：编译器不会创建单个 StringBuilder 以复用，StringBuilder 对象是在循环内部被创建的，这意味着每循环一次就会创建一个 StringBuilder 对象。</p>\n</blockquote>\n<p><strong>String 为什么是不可变的?</strong></p>\n<ul>\n<li>保存字符串的数组被 final 修饰且为私有的，并且String 类没有提供/暴露修改这个字符串的方法。</li>\n<li>String 类被 final 修饰导致其不能被继承，进而避免了子类破坏 String 不可变。</li>\n</ul>\n<h2 id=\"Exception-Error\"><a href=\"#Exception-Error\" class=\"headerlink\" title=\"Exception/Error\"></a>Exception/Error</h2><p>在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable 类有两个重要的子类:</p>\n<p>Exception :程序本身可以处理的异常，可以通过 catch 来进行捕获。Exception 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。</p>\n<p><img src=\"/2022/03/16/javaBasis/error_exception.webp\" alt=\"Error和Exception\"></p>\n<p><strong>Checked Exception</strong> 即受检查异常，Java 代码在编译过程中，如果受检查异常没有被 catch/throw 处理的话，就没办法通过编译 。</p>\n<blockquote>\n<p>除了RuntimeException及其子类以外，其他的Exception类及其子类都属于受检查异常 。常见的受检查异常有： IO 相关的异常、ClassNotFoundException 、SQLException)</p>\n</blockquote>\n<p><strong>Unchecked Exception</strong> 即 不受检查异常 ，Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。</p>\n<blockquote>\n<p>RuntimeException 及其子类都统称为非受检查异常，例如：NullPointerException、NumberFormatException（字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等)</p>\n</blockquote>\n<p>Error ：Error 属于程序无法处理的错误 ，不建议通过catch捕获 。例如Java 虚拟机运行错误（Virtual MachineError）、虚拟机内存不够错误(OutOfMemoryError)、类定义错误（NoClassDefFoundError）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p>\n<h2 id=\"和equals的区别\"><a href=\"#和equals的区别\" class=\"headerlink\" title=\"==和equals的区别\"></a>==和equals的区别</h2><p>== 对于基本类型和引用类型的作用效果是不同的:</p>\n<ul>\n<li>对于基本数据类型来说，==比较的是值</li>\n<li>对于引用数据类型来说，==比较的是对象的内存地址<blockquote>\n<p>因为java只有值传递，所有对于==而言，不管是比较基本数据类型还是引用数据类型，本质都是比较值，只是引用类型变量存的值是对象的地址<br><code>equals</code>的比较：</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>类没有覆盖<code>equals()</code>方法，等价于==，使用的默认是Object类equals()方法</li>\n<li>类覆盖了<code>equals()</code>方法，一般都会覆盖<code>equals()</code>方法来比较两个对象的值是否相等，如String<h3 id=\"equals-hashcode\"><a href=\"#equals-hashcode\" class=\"headerlink\" title=\"equals() / hashcode()\"></a>equals() / hashcode()</h3></li>\n</ol>\n<ul>\n<li>如果两个对象的hashCode 值相等，那这两个对象不一定相等（哈希碰撞）。 </li>\n<li>如果两个对象的hashCode 值相等并且equals()方法返回 true，我们才认为这两个对象相等。 </li>\n<li>如果两个对象的hashCode 值不相等，我们就可以直接认为这两个对象不相等。</li>\n</ul>\n<h2 id=\"Java-中-IO-流\"><a href=\"#Java-中-IO-流\" class=\"headerlink\" title=\"Java 中 IO 流\"></a>Java 中 IO 流</h2><ul>\n<li>按照流的流向分，可以分为输入流和输出流；</li>\n<li>按照操作单元划分，可以划分为字节流和字符流；</li>\n<li>按照流的角色划分为节点流和处理流。</li>\n</ul>\n<p>Java IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的:<br>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。<br>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</p>\n<p>按操作方式分类结构图：</p>\n<p><img src=\"/2022/03/16/javaBasis/IO.png\" alt=\"Java IO\"></p>\n<h2 id=\"既然有了字节流-为什么还要有字符流\"><a href=\"#既然有了字节流-为什么还要有字符流\" class=\"headerlink\" title=\"既然有了字节流,为什么还要有字符流?\"></a>既然有了字节流,为什么还要有字符流?</h2><blockquote>\n<p>问题本质想问：不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？</p>\n</blockquote>\n<p>回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><h2 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h2>","site":{"data":{}},"excerpt":"<h2 id=\"Java语言特点\"><a href=\"#Java语言特点\" class=\"headerlink\" title=\"Java语言特点\"></a>Java语言特点</h2><ul>\n<li>面向对象（封装，继承，多态）</li>\n<li>平台无关性，一次编写，随处运行(Write once, run anywhere) -&gt; 跨平台；保证这一点的正是JVM机制</li>\n<li>支持多线程（C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）</li>\n<li>编译与解释并存</li></ul>","more":"\n\n<h2 id=\"比较需要关注的方面\"><a href=\"#比较需要关注的方面\" class=\"headerlink\" title=\"比较需要关注的方面:\"></a>比较需要关注的方面:</h2><ul>\n<li>jvm 内存区域/垃圾回收</li>\n<li>类加载过程 class loader</li>\n<li>反射/泛型/lamda</li>\n<li>IO/NIO</li>\n<li>解释执行/动态编译</li>\n</ul>\n<h2 id=\"JVM、JDK、JRE的区别\"><a href=\"#JVM、JDK、JRE的区别\" class=\"headerlink\" title=\"JVM、JDK、JRE的区别\"></a>JVM、JDK、JRE的区别</h2><p>JVM：Java Virtual Machine，Java 虚拟机，Java 程序运行在 Java 虚拟机上。针对不同系统的实现（Windows，Linux，macOS）不同的 JVM，因此 Java 语言可以实现跨平台。</p>\n<p>JRE： Java Runtime Environment, Java 运⾏时环境。它是运⾏已编译 Java 程序所需的所有内容的集合，包括 Java 虚拟机（JVM），Java 类库，Java 命令和其他的⼀些基础构件。但是，它不能⽤于创建新程序。</p>\n<p>JDK: Java Development Kit，它是功能⻬全的 Java SDK。它拥有 JRE 所拥有的⼀切，还有编译器（javac）和⼯具（如 javadoc 和 jdb）。它能够创建和编译程序。</p>\n<p><img src=\"/2022/03/16/javaBasis/jvm_jdk_jre.png\" alt=\"JVM、JDK和JRE\"></p>\n<h2 id=\"Java源代码运行过程\"><a href=\"#Java源代码运行过程\" class=\"headerlink\" title=\"Java源代码运行过程\"></a>Java源代码运行过程</h2><p>字节码: JVM可以理解的代码，即扩展名为.class的文件。（java语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点）<br><img src=\"/2022/03/16/javaBasis/compile.png\" alt=\"compile\"></p>\n<p>JVM 类加载器首先加载字节码文件，然后通过解释器逐行解释执行，这种方式的执行速度会相对比较慢。而且，有些方法和代码块是经常需要被调用的(也就是所谓的热点代码)，所以后面引进了 JIT（just-in-time compilation） 编译器，而 JIT 属于运行时编译。当 JIT 编译器完成第一次编译后，其会将字节码对应的机器码保存下来，下次可以直接使用。而我们知道，机器码的运行效率肯定是高于 Java 解释器的。</p>\n<p>我们可以将高级编程语言按照程序的执行方式分为两种：</p>\n<p><strong>编译型</strong> ：编译型语言 会通过编译器将源代码<strong>一次性翻译</strong>成可被该平台执行的机器码。一般情况下，编译语言的执行速度比较快，开发效率比较低。常见的编译性语言有 C、C++、Go、Rust 等等。</p>\n<p><strong>解释型</strong> ：解释型语言会通过解释器<strong>一句一句</strong>的将代码解释（interpret）为机器代码后再执行。解释型语言开发效率比较快，执行速度比较慢。常见的解释性语言有 Python、JavaScript、PHP 等等。</p>\n<p><strong>Java 语言既具有编译型语言的特征，也具有解释型语言的特征</strong>。因为 Java 程序要经过先编译，后解释两个步骤，由 Java 编写的程序需要先经过编译步骤，生成字节码（.class 文件），这种字节码必须由 Java 解释器来解释执行。</p>\n<h2 id=\"自动拆箱-封箱\"><a href=\"#自动拆箱-封箱\" class=\"headerlink\" title=\"自动拆箱/封箱\"></a>自动拆箱/封箱</h2><p>装箱：将基本类型用它们对应的引用类型包装起来；<br>拆箱：将包装类型转换为基本数据类型；<br>装箱其实就是调用了包装类的<code>valueOf()</code>方法，拆箱其实就是调用了<code>xxxValue()</code>方法。<br><code>Integer i = 10</code> 等价于 <code>Integer i = Integer.valueOf(10)</code><br><code>int n = i</code> 等价于 <code>int n = i.intValue()</code>;<br><strong>如果频繁拆装箱的话，也会严重影响系统的性能。我们应该尽量避免不必要的拆装箱操作。</strong></p>\n<h2 id=\"面向对象三大特征\"><a href=\"#面向对象三大特征\" class=\"headerlink\" title=\"面向对象三大特征\"></a>面向对象三大特征</h2><ol>\n<li><p>封装<br>封装是指把<em>一个对象的状态信息（也就是属性）</em>隐藏在对象内部，不允许外部对象直接访问对象的内部信息。但是可以提供一些可以被外界<em>访问的方法</em>来操作属性。</p>\n</li>\n<li><p>继承<br>不同类型的对象，相互之间经常有一定数量的共同点。同时，每一个对象还定义了额外的特性使得他们与众不同。<br>继承是使用已存在的类的定义作为基础建立新类的技术，新类的定义可以增加新的数据或新的功能，也可以用父类的功能，但不能选择性地继承父类。通过使用继承，可以快速地创建新的类，可以提高代码的重用，程序的可维护性，节省大量创建新类的时间 ，提高我们的开发效率。</p>\n</li>\n</ol>\n<ul>\n<li>子类拥有父类对象所有的属性和方法（包括私有属性和私有方法），但是父类中的私有属性和方法子类是无法访问，只是拥有。</li>\n<li>子类可以拥有自己属性和方法，即子类可以对父类进行扩展。</li>\n<li>子类可以用自己的方式实现父类的方法</li>\n</ul>\n<ol start=\"3\">\n<li>多态<br>通俗来说，就是多种形态，具体点就是去完成某个行为，当不同的对象去完成时会产生出不同的状态。<br>允许将子类类型的指针赋值给父类类型的指针，把不同的子类对象都当作父类来看。</li>\n</ol>\n<ul>\n<li>两种形式可以实现多态：继承（多个⼦类对同⼀⽅法的重写）和接⼝（实现接⼝并覆盖接⼝中同⼀⽅法）</li>\n<li>多态存在的三个必要条件：继承；重写；父类引用指向子类对象：Parent p = new Child();</li>\n</ul>\n<p><strong>重载 overload</strong> 编译时多态，方法名相同，参数列表（类型/个数）不同</p>\n<p><strong>重写 override</strong> 运行时多态，重写要求子类被重写方法与父类被重写方法有相同的返回类型，不能比父类被重写方法声明更多的异常</p>\n<h2 id=\"接口-interface和抽象类-abstract-class有什么共同点和区别？\"><a href=\"#接口-interface和抽象类-abstract-class有什么共同点和区别？\" class=\"headerlink\" title=\"接口 interface和抽象类 abstract class有什么共同点和区别？\"></a>接口 interface和抽象类 abstract class有什么共同点和区别？</h2><p>接口是对行为的抽象，它是抽象方法的集合，利用接口可以达到 API 定义和实现分离的目的。<br>共同点 ：</p>\n<ul>\n<li>都不能被实例化。</li>\n<li>都可以包含抽象方法。</li>\n<li>都可以有默认实现的方法（Java 8 可以用 default 关键在接口中定义默认方法）。</li>\n</ul>\n<p>区别 ：</p>\n<ul>\n<li>接口主要用于对类的行为进行约束，你实现了某个接口就具有了对应的行为。抽象类主要用于代码复用，强调的是所属关系（比如说我们抽象了一个发送短信的抽象类，）。</li>\n<li>一个类只能继承一个类，但是可以实现多个接口。</li>\n<li>接口中的成员变量只能是<code>public static final</code>类型的，不能被修改且必须有初始值，而抽象类的成员变量默认<code>default</code>，可在子类中被重新定义，也可被重新赋值。</li>\n</ul>\n<h2 id=\"final-关键字有什么作用？\"><a href=\"#final-关键字有什么作用？\" class=\"headerlink\" title=\"final 关键字有什么作用？\"></a>final 关键字有什么作用？</h2><p>final 表示不可变的意思，可用于修饰类、属性和方法：</p>\n<ul>\n<li><p>被 final 修饰的类不可以被继承, 如String</p>\n</li>\n<li><p>被 final 修饰的方法不可以被重写</p>\n</li>\n<li><p>被 final 修饰的变量不可变，被 final 修饰的变量必须被显式第指定初始值，还得注意的是，这里的不可变指的是变量的引用不可变，不是引用指向的内容的不可变。</p>\n</li>\n</ul>\n<h2 id=\"java中创建对象的方式\"><a href=\"#java中创建对象的方式\" class=\"headerlink\" title=\"java中创建对象的方式\"></a>java中创建对象的方式</h2><ul>\n<li>new 创建新对象</li>\n<li>通过反射机制</li>\n<li>采用 clone 机制</li>\n<li>通过序列化机制</li>\n</ul>\n<h2 id=\"String、StringBuffer、StringBuilder-的区别？\"><a href=\"#String、StringBuffer、StringBuilder-的区别？\" class=\"headerlink\" title=\"String、StringBuffer、StringBuilder 的区别？\"></a>String、StringBuffer、StringBuilder 的区别？</h2><p>String：String 的值被创建后不能修改，任何对 String 的修改都会引发新的 String 对象的生成。<br>StringBuffer：跟 String 类似，但是值可以被修改，使用 synchronized 来保证线程安全。<br>StringBuilder：StringBuffer 的非线程安全版本，性能上更高一些。</p>\n<blockquote>\n<p>在循环内使用“+”进行字符串的拼接的话，存在比较明显的缺陷：编译器不会创建单个 StringBuilder 以复用，StringBuilder 对象是在循环内部被创建的，这意味着每循环一次就会创建一个 StringBuilder 对象。</p>\n</blockquote>\n<p><strong>String 为什么是不可变的?</strong></p>\n<ul>\n<li>保存字符串的数组被 final 修饰且为私有的，并且String 类没有提供/暴露修改这个字符串的方法。</li>\n<li>String 类被 final 修饰导致其不能被继承，进而避免了子类破坏 String 不可变。</li>\n</ul>\n<h2 id=\"Exception-Error\"><a href=\"#Exception-Error\" class=\"headerlink\" title=\"Exception/Error\"></a>Exception/Error</h2><p>在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable 类有两个重要的子类:</p>\n<p>Exception :程序本身可以处理的异常，可以通过 catch 来进行捕获。Exception 又可以分为 Checked Exception (受检查异常，必须处理) 和 Unchecked Exception (不受检查异常，可以不处理)。</p>\n<p><img src=\"/2022/03/16/javaBasis/error_exception.webp\" alt=\"Error和Exception\"></p>\n<p><strong>Checked Exception</strong> 即受检查异常，Java 代码在编译过程中，如果受检查异常没有被 catch/throw 处理的话，就没办法通过编译 。</p>\n<blockquote>\n<p>除了RuntimeException及其子类以外，其他的Exception类及其子类都属于受检查异常 。常见的受检查异常有： IO 相关的异常、ClassNotFoundException 、SQLException)</p>\n</blockquote>\n<p><strong>Unchecked Exception</strong> 即 不受检查异常 ，Java 代码在编译过程中 ，我们即使不处理不受检查异常也可以正常通过编译。</p>\n<blockquote>\n<p>RuntimeException 及其子类都统称为非受检查异常，例如：NullPointerException、NumberFormatException（字符串转换为数字）、ArrayIndexOutOfBoundsException（数组越界）、ClassCastException（类型转换错误）、ArithmeticException（算术错误）等)</p>\n</blockquote>\n<p>Error ：Error 属于程序无法处理的错误 ，不建议通过catch捕获 。例如Java 虚拟机运行错误（Virtual MachineError）、虚拟机内存不够错误(OutOfMemoryError)、类定义错误（NoClassDefFoundError）等 。这些异常发生时，Java 虚拟机（JVM）一般会选择线程终止。</p>\n<h2 id=\"和equals的区别\"><a href=\"#和equals的区别\" class=\"headerlink\" title=\"==和equals的区别\"></a>==和equals的区别</h2><p>== 对于基本类型和引用类型的作用效果是不同的:</p>\n<ul>\n<li>对于基本数据类型来说，==比较的是值</li>\n<li>对于引用数据类型来说，==比较的是对象的内存地址<blockquote>\n<p>因为java只有值传递，所有对于==而言，不管是比较基本数据类型还是引用数据类型，本质都是比较值，只是引用类型变量存的值是对象的地址<br><code>equals</code>的比较：</p>\n</blockquote>\n</li>\n</ul>\n<ol>\n<li>类没有覆盖<code>equals()</code>方法，等价于==，使用的默认是Object类equals()方法</li>\n<li>类覆盖了<code>equals()</code>方法，一般都会覆盖<code>equals()</code>方法来比较两个对象的值是否相等，如String<h3 id=\"equals-hashcode\"><a href=\"#equals-hashcode\" class=\"headerlink\" title=\"equals() / hashcode()\"></a>equals() / hashcode()</h3></li>\n</ol>\n<ul>\n<li>如果两个对象的hashCode 值相等，那这两个对象不一定相等（哈希碰撞）。 </li>\n<li>如果两个对象的hashCode 值相等并且equals()方法返回 true，我们才认为这两个对象相等。 </li>\n<li>如果两个对象的hashCode 值不相等，我们就可以直接认为这两个对象不相等。</li>\n</ul>\n<h2 id=\"Java-中-IO-流\"><a href=\"#Java-中-IO-流\" class=\"headerlink\" title=\"Java 中 IO 流\"></a>Java 中 IO 流</h2><ul>\n<li>按照流的流向分，可以分为输入流和输出流；</li>\n<li>按照操作单元划分，可以划分为字节流和字符流；</li>\n<li>按照流的角色划分为节点流和处理流。</li>\n</ul>\n<p>Java IO 流的 40 多个类都是从如下 4 个抽象类基类中派生出来的:<br>InputStream/Reader: 所有的输入流的基类，前者是字节输入流，后者是字符输入流。<br>OutputStream/Writer: 所有输出流的基类，前者是字节输出流，后者是字符输出流。</p>\n<p>按操作方式分类结构图：</p>\n<p><img src=\"/2022/03/16/javaBasis/IO.png\" alt=\"Java IO\"></p>\n<h2 id=\"既然有了字节流-为什么还要有字符流\"><a href=\"#既然有了字节流-为什么还要有字符流\" class=\"headerlink\" title=\"既然有了字节流,为什么还要有字符流?\"></a>既然有了字节流,为什么还要有字符流?</h2><blockquote>\n<p>问题本质想问：不管是文件读写还是网络发送接收，信息的最小存储单元都是字节，那为什么 I/O 流操作要分为字节流操作和字符流操作呢？</p>\n</blockquote>\n<p>回答：字符流是由 Java 虚拟机将字节转换得到的，问题就出在这个过程还算是非常耗时，并且，如果我们不知道编码类型就很容易出现乱码问题。所以， I/O 流就干脆提供了一个直接操作字符的接口，方便我们平时对字符进行流操作。如果音频文件、图片等媒体文件用字节流比较好，如果涉及到字符的话使用字符流比较好。</p>\n<h2 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h2><h2 id=\"序列化\"><a href=\"#序列化\" class=\"headerlink\" title=\"序列化\"></a>序列化</h2>"},{"title":"network","date":"2022-03-30T14:43:08.000Z","_content":"## OSI 七层模型\n\n## TCP 四层模型\n\n## TCP三次握手\n\n## TCP四次挥手\n\n## TCP & UDP\n\n## TCP协议如何保证可靠传输\n\n## 浏览器请求一个网站的过程\n","source":"_posts/network.md","raw":"---\ntitle: network\ndate: 2022-03-30 22:43:08\ntags:\ncategories:\n---\n## OSI 七层模型\n\n## TCP 四层模型\n\n## TCP三次握手\n\n## TCP四次挥手\n\n## TCP & UDP\n\n## TCP协议如何保证可靠传输\n\n## 浏览器请求一个网站的过程\n","slug":"network","published":1,"updated":"2022-04-04T13:12:45.730Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2gbadmg00080epl9f0j2tsh","content":"<h2 id=\"OSI-七层模型\"><a href=\"#OSI-七层模型\" class=\"headerlink\" title=\"OSI 七层模型\"></a>OSI 七层模型</h2><h2 id=\"TCP-四层模型\"><a href=\"#TCP-四层模型\" class=\"headerlink\" title=\"TCP 四层模型\"></a>TCP 四层模型</h2><h2 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h2><h2 id=\"TCP四次挥手\"><a href=\"#TCP四次挥手\" class=\"headerlink\" title=\"TCP四次挥手\"></a>TCP四次挥手</h2><h2 id=\"TCP-amp-UDP\"><a href=\"#TCP-amp-UDP\" class=\"headerlink\" title=\"TCP &amp; UDP\"></a>TCP &amp; UDP</h2><h2 id=\"TCP协议如何保证可靠传输\"><a href=\"#TCP协议如何保证可靠传输\" class=\"headerlink\" title=\"TCP协议如何保证可靠传输\"></a>TCP协议如何保证可靠传输</h2><h2 id=\"浏览器请求一个网站的过程\"><a href=\"#浏览器请求一个网站的过程\" class=\"headerlink\" title=\"浏览器请求一个网站的过程\"></a>浏览器请求一个网站的过程</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"OSI-七层模型\"><a href=\"#OSI-七层模型\" class=\"headerlink\" title=\"OSI 七层模型\"></a>OSI 七层模型</h2><h2 id=\"TCP-四层模型\"><a href=\"#TCP-四层模型\" class=\"headerlink\" title=\"TCP 四层模型\"></a>TCP 四层模型</h2><h2 id=\"TCP三次握手\"><a href=\"#TCP三次握手\" class=\"headerlink\" title=\"TCP三次握手\"></a>TCP三次握手</h2><h2 id=\"TCP四次挥手\"><a href=\"#TCP四次挥手\" class=\"headerlink\" title=\"TCP四次挥手\"></a>TCP四次挥手</h2><h2 id=\"TCP-amp-UDP\"><a href=\"#TCP-amp-UDP\" class=\"headerlink\" title=\"TCP &amp; UDP\"></a>TCP &amp; UDP</h2><h2 id=\"TCP协议如何保证可靠传输\"><a href=\"#TCP协议如何保证可靠传输\" class=\"headerlink\" title=\"TCP协议如何保证可靠传输\"></a>TCP协议如何保证可靠传输</h2><h2 id=\"浏览器请求一个网站的过程\"><a href=\"#浏览器请求一个网站的过程\" class=\"headerlink\" title=\"浏览器请求一个网站的过程\"></a>浏览器请求一个网站的过程</h2>"},{"title":"mysql","date":"2022-04-04T13:12:53.000Z","_content":"## MyISAM和InnoDB的区别\n\n## 索引优缺点\n\n## 索引底层数据结构\n\n## B树和B+树的区别\n\n## 索引类型\n\n## 聚集索引和非聚集索引\n\n## 覆盖索引和回表\n\n\n## 事务的四大特性\n\n## 并发事务带来的问题\n\n## 事务隔离级别\n\n## MySQL锁\n\n## MVCC\n\n## MySQL主从同步","source":"_posts/mysql.md","raw":"---\ntitle: mysql\ndate: 2022-04-04 21:12:53\ntags:\ncategories:\n  - DataBase\n---\n## MyISAM和InnoDB的区别\n\n## 索引优缺点\n\n## 索引底层数据结构\n\n## B树和B+树的区别\n\n## 索引类型\n\n## 聚集索引和非聚集索引\n\n## 覆盖索引和回表\n\n\n## 事务的四大特性\n\n## 并发事务带来的问题\n\n## 事务隔离级别\n\n## MySQL锁\n\n## MVCC\n\n## MySQL主从同步","slug":"mysql","published":1,"updated":"2022-04-05T07:55:02.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2gbadmh000a0eple27sgr8j","content":"<h2 id=\"MyISAM和InnoDB的区别\"><a href=\"#MyISAM和InnoDB的区别\" class=\"headerlink\" title=\"MyISAM和InnoDB的区别\"></a>MyISAM和InnoDB的区别</h2><h2 id=\"索引优缺点\"><a href=\"#索引优缺点\" class=\"headerlink\" title=\"索引优缺点\"></a>索引优缺点</h2><h2 id=\"索引底层数据结构\"><a href=\"#索引底层数据结构\" class=\"headerlink\" title=\"索引底层数据结构\"></a>索引底层数据结构</h2><h2 id=\"B树和B-树的区别\"><a href=\"#B树和B-树的区别\" class=\"headerlink\" title=\"B树和B+树的区别\"></a>B树和B+树的区别</h2><h2 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h2><h2 id=\"聚集索引和非聚集索引\"><a href=\"#聚集索引和非聚集索引\" class=\"headerlink\" title=\"聚集索引和非聚集索引\"></a>聚集索引和非聚集索引</h2><h2 id=\"覆盖索引和回表\"><a href=\"#覆盖索引和回表\" class=\"headerlink\" title=\"覆盖索引和回表\"></a>覆盖索引和回表</h2><h2 id=\"事务的四大特性\"><a href=\"#事务的四大特性\" class=\"headerlink\" title=\"事务的四大特性\"></a>事务的四大特性</h2><h2 id=\"并发事务带来的问题\"><a href=\"#并发事务带来的问题\" class=\"headerlink\" title=\"并发事务带来的问题\"></a>并发事务带来的问题</h2><h2 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h2><h2 id=\"MySQL锁\"><a href=\"#MySQL锁\" class=\"headerlink\" title=\"MySQL锁\"></a>MySQL锁</h2><h2 id=\"MVCC\"><a href=\"#MVCC\" class=\"headerlink\" title=\"MVCC\"></a>MVCC</h2><h2 id=\"MySQL主从同步\"><a href=\"#MySQL主从同步\" class=\"headerlink\" title=\"MySQL主从同步\"></a>MySQL主从同步</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"MyISAM和InnoDB的区别\"><a href=\"#MyISAM和InnoDB的区别\" class=\"headerlink\" title=\"MyISAM和InnoDB的区别\"></a>MyISAM和InnoDB的区别</h2><h2 id=\"索引优缺点\"><a href=\"#索引优缺点\" class=\"headerlink\" title=\"索引优缺点\"></a>索引优缺点</h2><h2 id=\"索引底层数据结构\"><a href=\"#索引底层数据结构\" class=\"headerlink\" title=\"索引底层数据结构\"></a>索引底层数据结构</h2><h2 id=\"B树和B-树的区别\"><a href=\"#B树和B-树的区别\" class=\"headerlink\" title=\"B树和B+树的区别\"></a>B树和B+树的区别</h2><h2 id=\"索引类型\"><a href=\"#索引类型\" class=\"headerlink\" title=\"索引类型\"></a>索引类型</h2><h2 id=\"聚集索引和非聚集索引\"><a href=\"#聚集索引和非聚集索引\" class=\"headerlink\" title=\"聚集索引和非聚集索引\"></a>聚集索引和非聚集索引</h2><h2 id=\"覆盖索引和回表\"><a href=\"#覆盖索引和回表\" class=\"headerlink\" title=\"覆盖索引和回表\"></a>覆盖索引和回表</h2><h2 id=\"事务的四大特性\"><a href=\"#事务的四大特性\" class=\"headerlink\" title=\"事务的四大特性\"></a>事务的四大特性</h2><h2 id=\"并发事务带来的问题\"><a href=\"#并发事务带来的问题\" class=\"headerlink\" title=\"并发事务带来的问题\"></a>并发事务带来的问题</h2><h2 id=\"事务隔离级别\"><a href=\"#事务隔离级别\" class=\"headerlink\" title=\"事务隔离级别\"></a>事务隔离级别</h2><h2 id=\"MySQL锁\"><a href=\"#MySQL锁\" class=\"headerlink\" title=\"MySQL锁\"></a>MySQL锁</h2><h2 id=\"MVCC\"><a href=\"#MVCC\" class=\"headerlink\" title=\"MVCC\"></a>MVCC</h2><h2 id=\"MySQL主从同步\"><a href=\"#MySQL主从同步\" class=\"headerlink\" title=\"MySQL主从同步\"></a>MySQL主从同步</h2>"},{"title":"redis","date":"2022-04-05T07:49:05.000Z","_content":"## Redis基本数据类型\n\n## Redis为什么快？\n\n## Redis 6.0之后引入多线程\n\n## Redis热key\n\n## 缓存击穿\n\n## 缓存穿透\n\n## 缓存雪崩\n\n## Redis过期策略\n\n## Redis内存淘汰机制\n\n## Redis持久化\n\n## Redis主从架构\n\n## Redis 哨兵机制\n\n## Redis集群\n","source":"_posts/redis.md","raw":"---\ntitle: redis\ndate: 2022-04-05 15:49:05\ntags:\ncategories:\n  - Java\n  - Redis\n---\n## Redis基本数据类型\n\n## Redis为什么快？\n\n## Redis 6.0之后引入多线程\n\n## Redis热key\n\n## 缓存击穿\n\n## 缓存穿透\n\n## 缓存雪崩\n\n## Redis过期策略\n\n## Redis内存淘汰机制\n\n## Redis持久化\n\n## Redis主从架构\n\n## Redis 哨兵机制\n\n## Redis集群\n","slug":"redis","published":1,"updated":"2022-04-05T07:55:02.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2gbadmh000b0epl6j0e0szk","content":"<h2 id=\"Redis基本数据类型\"><a href=\"#Redis基本数据类型\" class=\"headerlink\" title=\"Redis基本数据类型\"></a>Redis基本数据类型</h2><h2 id=\"Redis为什么快？\"><a href=\"#Redis为什么快？\" class=\"headerlink\" title=\"Redis为什么快？\"></a>Redis为什么快？</h2><h2 id=\"Redis-6-0之后引入多线程\"><a href=\"#Redis-6-0之后引入多线程\" class=\"headerlink\" title=\"Redis 6.0之后引入多线程\"></a>Redis 6.0之后引入多线程</h2><h2 id=\"Redis热key\"><a href=\"#Redis热key\" class=\"headerlink\" title=\"Redis热key\"></a>Redis热key</h2><h2 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h2><h2 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h2><h2 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h2><h2 id=\"Redis过期策略\"><a href=\"#Redis过期策略\" class=\"headerlink\" title=\"Redis过期策略\"></a>Redis过期策略</h2><h2 id=\"Redis内存淘汰机制\"><a href=\"#Redis内存淘汰机制\" class=\"headerlink\" title=\"Redis内存淘汰机制\"></a>Redis内存淘汰机制</h2><h2 id=\"Redis持久化\"><a href=\"#Redis持久化\" class=\"headerlink\" title=\"Redis持久化\"></a>Redis持久化</h2><h2 id=\"Redis主从架构\"><a href=\"#Redis主从架构\" class=\"headerlink\" title=\"Redis主从架构\"></a>Redis主从架构</h2><h2 id=\"Redis-哨兵机制\"><a href=\"#Redis-哨兵机制\" class=\"headerlink\" title=\"Redis 哨兵机制\"></a>Redis 哨兵机制</h2><h2 id=\"Redis集群\"><a href=\"#Redis集群\" class=\"headerlink\" title=\"Redis集群\"></a>Redis集群</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Redis基本数据类型\"><a href=\"#Redis基本数据类型\" class=\"headerlink\" title=\"Redis基本数据类型\"></a>Redis基本数据类型</h2><h2 id=\"Redis为什么快？\"><a href=\"#Redis为什么快？\" class=\"headerlink\" title=\"Redis为什么快？\"></a>Redis为什么快？</h2><h2 id=\"Redis-6-0之后引入多线程\"><a href=\"#Redis-6-0之后引入多线程\" class=\"headerlink\" title=\"Redis 6.0之后引入多线程\"></a>Redis 6.0之后引入多线程</h2><h2 id=\"Redis热key\"><a href=\"#Redis热key\" class=\"headerlink\" title=\"Redis热key\"></a>Redis热key</h2><h2 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h2><h2 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h2><h2 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h2><h2 id=\"Redis过期策略\"><a href=\"#Redis过期策略\" class=\"headerlink\" title=\"Redis过期策略\"></a>Redis过期策略</h2><h2 id=\"Redis内存淘汰机制\"><a href=\"#Redis内存淘汰机制\" class=\"headerlink\" title=\"Redis内存淘汰机制\"></a>Redis内存淘汰机制</h2><h2 id=\"Redis持久化\"><a href=\"#Redis持久化\" class=\"headerlink\" title=\"Redis持久化\"></a>Redis持久化</h2><h2 id=\"Redis主从架构\"><a href=\"#Redis主从架构\" class=\"headerlink\" title=\"Redis主从架构\"></a>Redis主从架构</h2><h2 id=\"Redis-哨兵机制\"><a href=\"#Redis-哨兵机制\" class=\"headerlink\" title=\"Redis 哨兵机制\"></a>Redis 哨兵机制</h2><h2 id=\"Redis集群\"><a href=\"#Redis集群\" class=\"headerlink\" title=\"Redis集群\"></a>Redis集群</h2>"},{"title":"jvm","date":"2022-03-21T03:55:14.000Z","_content":"JVM(Java Virtual Machine) - Java 虚拟机，它是 Java 实现平台无关性的基石。\n\nJava 程序运行的时候，编译器将 Java 文件编译成平台无关的 Java 字节码文件（.class）,接下来对应平台 JVM 对字节码文件进行解释，翻译成对应平台匹配的机器指令并运行。\n<!--more-->\n## JVM 内存区域\nJava 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。\nJDK 1.6\n![JDK1.6 运行时数据区域](运行时区域_JDK1.6.png)\nJDK 1.8\n![JDK1.8 运行时数据区域](运行时区域_JDK1.8.png)\n\n线程私有的：\n- 程序计数器\n- 虚拟机栈\n- 本地方法栈\n\n线程共享的：\n- 堆\n- 方法区\n- 直接内存 (非运行时数据区的一部分)\n\n### 程序计数器\n程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。**字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令**，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。\n\n另外，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。\n\n从上面的介绍中我们知道程序计数器主要有两个作用：\n\n字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。\n在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。\n注意：程序计数器是唯一一个不会出现 OutOfMemoryError 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。\n\n### Java虚拟栈\nJava 虚拟机栈描述的是 Java 方法执行的线程内存模型：方法执行时，JVM 会同步创建一个栈帧，用来存储局部变量表、操作数栈、动态连接等。\n\n>Java 虚拟机栈会出现两种错误：StackOverFlowError 和 OutOfMemoryError。\nStackOverFlowError： 若 Java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 StackOverFlowError 错误。\nOutOfMemoryError： Java 虚拟机栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。\n\n### 本地方法栈\n虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。（ 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。）\n\n本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。\n\n### 堆\nJava 堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，Java 里“几乎”所有的对象实例都在这里分配内存。\n\nJava 堆是垃圾收集器管理的内存区域，因此一些资料中它也被称作“GC 堆”（Garbage Collected Heap）。从回收内存的角度看，由于现代垃圾收集器大部分都是基于分代收集理论设计的，所以 Java 堆中经常会出现新生代、老年代、Eden空间、From Survivor空间、To Survivor空间等名词，需要注意的是这种划分只是根据垃圾回收机制来进行的划分，不是 Java 虚拟机规范本身制定的。\n\n### 方法区\n方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。\n\n方法区也被称为永久代。很多人都会分不清方法区和永久代的关系，为此我也查阅了文献。\n\n**方法区和永久代的关系**\n\n>《Java 虚拟机规范》只是规定了有方法区这么个概念和它的作用，并没有规定如何去实现它。那么，在不同的 JVM 上方法区的实现肯定是不同的了。 方法区和永久代的关系很像 Java 中接口和类的关系，类实现了接口，而永久代就是 HotSpot 虚拟机对虚拟机规范中方法区的一种实现方式。 也就是说，永久代是 HotSpot 的概念，方法区是 Java 虚拟机规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚拟机实现并没有永久代这一说法。\n\n**常用参数**\n\nJDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小\n```java\n-XX:PermSize=N //方法区 (永久代) 初始大小\n-XX:MaxPermSize=N //方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen\n```\n相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。\n\nJDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是直接内存。\n\n下面是一些常用参数：\n```java\n-XX:MetaspaceSize=N //设置 Metaspace 的初始（和最小大小）\n-XX:MaxMetaspaceSize=N //设置 Metaspace 的最大大小\n```\n与永久代很大的不同就是，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。\n\n**为什么要将永久代 (PermGen) 替换为元空间 (MetaSpace) 呢?**\n\n1.整个永久代有一个 JVM 本身设置的固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，虽然元空间仍旧可能溢出，但是比原来出现的几率会更小。\n>当元空间溢出时会得到如下错误： java.lang.OutOfMemoryError: MetaSpace\n\n你可以使用 -XX：MaxMetaspaceSize 标志设置最大元空间大小，默认值为 unlimited，这意味着它只受系统内存的限制。-XX：MetaspaceSize 调整标志定义元空间的初始大小如果未指定此标志，则 Metaspace 将根据运行时的应用程序需求动态地重新调整大小。\n\n2.元空间里面存放的是类的元数据，这样加载多少类的元数据就不由 MaxPermSize 控制了, 而由系统的实际可用空间来控制，这样能加载的类就更多了。\n\n3.在 JDK8，合并 HotSpot 和 JRockit 的代码时, JRockit 从来没有一个叫永久代的东西, 合并之后就没有必要额外的设置这么一个永久代的地方了。\n\n\n下图来自《深入理解 Java 虚拟机》第 3 版 2.2.5\n![MetaSpace](metaSpace.png)\n\n### 运行时常量池\n\n运行时常量池是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池表（用于存放编译期生成的各种字面量和符号引用）\n\n既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 错误。\n\nJDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区的实现为永久代\nJDK1.7 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代 。\nJDK1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(Metaspace)\n\n### 直接内存\n直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。\n\n## 对象的创建过程\nnew一个新的对象，首先查看类是否加载\n如果已经加载 => 分配内存空间 => 实例变量赋默认值 => 设置对象头 => 执行初始化方法\n未加载 => 类加载 => 连接（验证=>准备=>解析）=> 初始化\n> 分配内存空间：\n1. 指针碰撞，用\n2. 空闲列表\n\n## 类的生命周期\n\n加载 =>  连接（验证=>准备=>解析）=> 初始化 => 使用 => 卸载\n**加载**\n1. 将字节码转成二进制字节流\n2. 二进制字节流所代表的静态存储结构转换到方法去的运行时数据结构\n3. 在内存生成class对象\n\n**验证**\n1. 文件格式验证：验证字节流是否符合class文件格式规范\n2. 元数据验证：如此类是否有父类，收否继承了不允许被继承的累\n3. 字节码验证\n4. 符号引用验证\n\n**准备**\n为静态变量，常量分配内存并赋默认值（实例变量会在对象实例化时随对象分配在java堆中）\n\n**解析**\n把常量池中符号引用（符号描述引用目标）转换成直接引用（指向目标的指针或句柄）\n\n**初始化**\n执行static代码块进行初始化，如果存在父类，先对父类进行初始化\n\n**卸载**\n条件（如何判断一个类是无用的类）：\n1. 该类的所有的实例对象都被GC(堆不存在该类的实例对象)\n2. 该类没有再其他任何地方被引用\n3. 该类的类加载器的实例已被GC\n\n## 双亲委派机制\nJava类加载器从上至下为：\n- bootstrap classloader   启动类加载器\n- extension classloader   扩展类加载器\n- application classloader 应用程序类加载器\n- user classloader        用户自定义类加载器\n加载类的时候自下而上查询父类加载器是否已加载当前类，如果没有从顶向下加载该类\n**什么场景需要自定义user classloader**\n- 隔离加载器：在框架内进行中间件与应用的模块隔离，把类加载到不同的环境\n- 修改类加载的方式\n- 扩展加载源\n- 防止源码泄露：java代码容易被编译和篡改，可以进行编译加密 => 自定义累加器还原加密字节码\n\n\n## 垃圾回收\n![Java Heap](java_heap.png)\n\n\n## 如何判断对象是否死亡\n1. 引用计数法\n引用=> count+1; 引用结束=> count-1; 如果count=0=>无引用。但是无法解决循环引用的问题\n2. 可达性分析\n如果GC root到对应有引用链路说明该对象可达，如果没有可达引用链，则死亡\n**可作为GC root的对象**\n1. 虚拟机栈中引用对象\n2. 本地native方法引用对象\n3. 方法区静态属性引用对象\n4. 被同步锁持有的对象\n\n## 简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。\n1. 强引用 内存不够都不会被回收的引用对象，会抛出OOM\n2. 软引用 内存不够会被回收的引用对象\n3. 弱引用 不管内存够不够， gc都会回收的引用对象\n4. 虚引用 用于跟踪对象被垃圾回收的活动，一般和引用队列联合使用\n\n\n## 垃圾收集有哪些算法，各自的特点？\n1. 标记 - 清除 通过GC root标记还存活的对象，然后清楚未被标记的对象。\n   问题： 空间碎片\n2. 标记 - 复制 复制存活的对象到另一块区域，然后整片清空原区域，解决了空间碎片的问题\n3. 标记 - 整理 标记所有存货的对象，把标记对象往一端移动\n## HotSpot 为什么要分为新生代和老年代？\n## 常见的垃圾回收器有哪些？\n serial\n parallel\n CMS\n G1\n### 介绍一下 CMS,G1 收集器。\nCMS\n- 初始标记：寻找GC root直接关联的对象 STW\n- 并发标记存活对象\n- 重新标记， STW (修正并发标记期间因用户线程产生变动的对象)\n- 并发清除\n缺点： 碎片空间, 无法清理浮动垃圾；对CPU资源敏感\nG1：Garbage first\n- 把区域分成几个region\n- 初始标记 STW\n- 并发标记\n- 最终标记 STW\n- 筛选回收 STW, 会根据用户设置的停顿注定回收计划（维护一个优先列表，每次根据允许的收集事件优先选择回收价值最大的region), 需要回收的region中的存活对象复制到空的region，同时清理旧的region。\n## Minor GC 和 Full GC 有什么不同呢？\nEden区满了之后会触发Minor GC，把存活的对象放到Survivor0, Survivor0满了之后会触发Minor GC，会把存活的对象放到Survivor1，然后from和to指针会交换。\n老年代占满了就会触发Full GC，Full GC包括新生代和老年代的GC\n老年代空间不足的情况：\n1. 占用内存过大的对象会直接保存到老年代，但这个时候老年代空间不足\n2. promotion failure: Survivor区存活的对象年龄达到设定值，会将对象拷贝到老年代\n## 频繁Full GC\n\n## JVM调优","source":"_posts/jvm.md","raw":"---\ntitle: jvm\ndate: 2022-03-21 11:55:14\ntags:\ncategories:\n - java\n---\nJVM(Java Virtual Machine) - Java 虚拟机，它是 Java 实现平台无关性的基石。\n\nJava 程序运行的时候，编译器将 Java 文件编译成平台无关的 Java 字节码文件（.class）,接下来对应平台 JVM 对字节码文件进行解释，翻译成对应平台匹配的机器指令并运行。\n<!--more-->\n## JVM 内存区域\nJava 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。\nJDK 1.6\n![JDK1.6 运行时数据区域](运行时区域_JDK1.6.png)\nJDK 1.8\n![JDK1.8 运行时数据区域](运行时区域_JDK1.8.png)\n\n线程私有的：\n- 程序计数器\n- 虚拟机栈\n- 本地方法栈\n\n线程共享的：\n- 堆\n- 方法区\n- 直接内存 (非运行时数据区的一部分)\n\n### 程序计数器\n程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。**字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令**，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。\n\n另外，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。\n\n从上面的介绍中我们知道程序计数器主要有两个作用：\n\n字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。\n在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。\n注意：程序计数器是唯一一个不会出现 OutOfMemoryError 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。\n\n### Java虚拟栈\nJava 虚拟机栈描述的是 Java 方法执行的线程内存模型：方法执行时，JVM 会同步创建一个栈帧，用来存储局部变量表、操作数栈、动态连接等。\n\n>Java 虚拟机栈会出现两种错误：StackOverFlowError 和 OutOfMemoryError。\nStackOverFlowError： 若 Java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 StackOverFlowError 错误。\nOutOfMemoryError： Java 虚拟机栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。\n\n### 本地方法栈\n虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。（ 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。）\n\n本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。\n\n### 堆\nJava 堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，Java 里“几乎”所有的对象实例都在这里分配内存。\n\nJava 堆是垃圾收集器管理的内存区域，因此一些资料中它也被称作“GC 堆”（Garbage Collected Heap）。从回收内存的角度看，由于现代垃圾收集器大部分都是基于分代收集理论设计的，所以 Java 堆中经常会出现新生代、老年代、Eden空间、From Survivor空间、To Survivor空间等名词，需要注意的是这种划分只是根据垃圾回收机制来进行的划分，不是 Java 虚拟机规范本身制定的。\n\n### 方法区\n方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。\n\n方法区也被称为永久代。很多人都会分不清方法区和永久代的关系，为此我也查阅了文献。\n\n**方法区和永久代的关系**\n\n>《Java 虚拟机规范》只是规定了有方法区这么个概念和它的作用，并没有规定如何去实现它。那么，在不同的 JVM 上方法区的实现肯定是不同的了。 方法区和永久代的关系很像 Java 中接口和类的关系，类实现了接口，而永久代就是 HotSpot 虚拟机对虚拟机规范中方法区的一种实现方式。 也就是说，永久代是 HotSpot 的概念，方法区是 Java 虚拟机规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚拟机实现并没有永久代这一说法。\n\n**常用参数**\n\nJDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小\n```java\n-XX:PermSize=N //方法区 (永久代) 初始大小\n-XX:MaxPermSize=N //方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen\n```\n相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。\n\nJDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是直接内存。\n\n下面是一些常用参数：\n```java\n-XX:MetaspaceSize=N //设置 Metaspace 的初始（和最小大小）\n-XX:MaxMetaspaceSize=N //设置 Metaspace 的最大大小\n```\n与永久代很大的不同就是，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。\n\n**为什么要将永久代 (PermGen) 替换为元空间 (MetaSpace) 呢?**\n\n1.整个永久代有一个 JVM 本身设置的固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，虽然元空间仍旧可能溢出，但是比原来出现的几率会更小。\n>当元空间溢出时会得到如下错误： java.lang.OutOfMemoryError: MetaSpace\n\n你可以使用 -XX：MaxMetaspaceSize 标志设置最大元空间大小，默认值为 unlimited，这意味着它只受系统内存的限制。-XX：MetaspaceSize 调整标志定义元空间的初始大小如果未指定此标志，则 Metaspace 将根据运行时的应用程序需求动态地重新调整大小。\n\n2.元空间里面存放的是类的元数据，这样加载多少类的元数据就不由 MaxPermSize 控制了, 而由系统的实际可用空间来控制，这样能加载的类就更多了。\n\n3.在 JDK8，合并 HotSpot 和 JRockit 的代码时, JRockit 从来没有一个叫永久代的东西, 合并之后就没有必要额外的设置这么一个永久代的地方了。\n\n\n下图来自《深入理解 Java 虚拟机》第 3 版 2.2.5\n![MetaSpace](metaSpace.png)\n\n### 运行时常量池\n\n运行时常量池是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池表（用于存放编译期生成的各种字面量和符号引用）\n\n既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 错误。\n\nJDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区的实现为永久代\nJDK1.7 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代 。\nJDK1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(Metaspace)\n\n### 直接内存\n直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。\n\n## 对象的创建过程\nnew一个新的对象，首先查看类是否加载\n如果已经加载 => 分配内存空间 => 实例变量赋默认值 => 设置对象头 => 执行初始化方法\n未加载 => 类加载 => 连接（验证=>准备=>解析）=> 初始化\n> 分配内存空间：\n1. 指针碰撞，用\n2. 空闲列表\n\n## 类的生命周期\n\n加载 =>  连接（验证=>准备=>解析）=> 初始化 => 使用 => 卸载\n**加载**\n1. 将字节码转成二进制字节流\n2. 二进制字节流所代表的静态存储结构转换到方法去的运行时数据结构\n3. 在内存生成class对象\n\n**验证**\n1. 文件格式验证：验证字节流是否符合class文件格式规范\n2. 元数据验证：如此类是否有父类，收否继承了不允许被继承的累\n3. 字节码验证\n4. 符号引用验证\n\n**准备**\n为静态变量，常量分配内存并赋默认值（实例变量会在对象实例化时随对象分配在java堆中）\n\n**解析**\n把常量池中符号引用（符号描述引用目标）转换成直接引用（指向目标的指针或句柄）\n\n**初始化**\n执行static代码块进行初始化，如果存在父类，先对父类进行初始化\n\n**卸载**\n条件（如何判断一个类是无用的类）：\n1. 该类的所有的实例对象都被GC(堆不存在该类的实例对象)\n2. 该类没有再其他任何地方被引用\n3. 该类的类加载器的实例已被GC\n\n## 双亲委派机制\nJava类加载器从上至下为：\n- bootstrap classloader   启动类加载器\n- extension classloader   扩展类加载器\n- application classloader 应用程序类加载器\n- user classloader        用户自定义类加载器\n加载类的时候自下而上查询父类加载器是否已加载当前类，如果没有从顶向下加载该类\n**什么场景需要自定义user classloader**\n- 隔离加载器：在框架内进行中间件与应用的模块隔离，把类加载到不同的环境\n- 修改类加载的方式\n- 扩展加载源\n- 防止源码泄露：java代码容易被编译和篡改，可以进行编译加密 => 自定义累加器还原加密字节码\n\n\n## 垃圾回收\n![Java Heap](java_heap.png)\n\n\n## 如何判断对象是否死亡\n1. 引用计数法\n引用=> count+1; 引用结束=> count-1; 如果count=0=>无引用。但是无法解决循环引用的问题\n2. 可达性分析\n如果GC root到对应有引用链路说明该对象可达，如果没有可达引用链，则死亡\n**可作为GC root的对象**\n1. 虚拟机栈中引用对象\n2. 本地native方法引用对象\n3. 方法区静态属性引用对象\n4. 被同步锁持有的对象\n\n## 简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。\n1. 强引用 内存不够都不会被回收的引用对象，会抛出OOM\n2. 软引用 内存不够会被回收的引用对象\n3. 弱引用 不管内存够不够， gc都会回收的引用对象\n4. 虚引用 用于跟踪对象被垃圾回收的活动，一般和引用队列联合使用\n\n\n## 垃圾收集有哪些算法，各自的特点？\n1. 标记 - 清除 通过GC root标记还存活的对象，然后清楚未被标记的对象。\n   问题： 空间碎片\n2. 标记 - 复制 复制存活的对象到另一块区域，然后整片清空原区域，解决了空间碎片的问题\n3. 标记 - 整理 标记所有存货的对象，把标记对象往一端移动\n## HotSpot 为什么要分为新生代和老年代？\n## 常见的垃圾回收器有哪些？\n serial\n parallel\n CMS\n G1\n### 介绍一下 CMS,G1 收集器。\nCMS\n- 初始标记：寻找GC root直接关联的对象 STW\n- 并发标记存活对象\n- 重新标记， STW (修正并发标记期间因用户线程产生变动的对象)\n- 并发清除\n缺点： 碎片空间, 无法清理浮动垃圾；对CPU资源敏感\nG1：Garbage first\n- 把区域分成几个region\n- 初始标记 STW\n- 并发标记\n- 最终标记 STW\n- 筛选回收 STW, 会根据用户设置的停顿注定回收计划（维护一个优先列表，每次根据允许的收集事件优先选择回收价值最大的region), 需要回收的region中的存活对象复制到空的region，同时清理旧的region。\n## Minor GC 和 Full GC 有什么不同呢？\nEden区满了之后会触发Minor GC，把存活的对象放到Survivor0, Survivor0满了之后会触发Minor GC，会把存活的对象放到Survivor1，然后from和to指针会交换。\n老年代占满了就会触发Full GC，Full GC包括新生代和老年代的GC\n老年代空间不足的情况：\n1. 占用内存过大的对象会直接保存到老年代，但这个时候老年代空间不足\n2. promotion failure: Survivor区存活的对象年龄达到设定值，会将对象拷贝到老年代\n## 频繁Full GC\n\n## JVM调优","slug":"jvm","published":1,"updated":"2022-04-20T09:06:43.018Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2gbadmx000o0eplepy143l2","content":"<p>JVM(Java Virtual Machine) - Java 虚拟机，它是 Java 实现平台无关性的基石。</p>\n<p>Java 程序运行的时候，编译器将 Java 文件编译成平台无关的 Java 字节码文件（.class）,接下来对应平台 JVM 对字节码文件进行解释，翻译成对应平台匹配的机器指令并运行。</p>\n<span id=\"more\"></span>\n<h2 id=\"JVM-内存区域\"><a href=\"#JVM-内存区域\" class=\"headerlink\" title=\"JVM 内存区域\"></a>JVM 内存区域</h2><p>Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。<br>JDK 1.6<br><img src=\"/2022/03/21/jvm/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8C%BA%E5%9F%9F_JDK1.6.png\" alt=\"JDK1.6 运行时数据区域\"><br>JDK 1.8<br><img src=\"/2022/03/21/jvm/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8C%BA%E5%9F%9F_JDK1.8.png\" alt=\"JDK1.8 运行时数据区域\"></p>\n<p>线程私有的：</p>\n<ul>\n<li>程序计数器</li>\n<li>虚拟机栈</li>\n<li>本地方法栈</li>\n</ul>\n<p>线程共享的：</p>\n<ul>\n<li>堆</li>\n<li>方法区</li>\n<li>直接内存 (非运行时数据区的一部分)</li>\n</ul>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。<strong>字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令</strong>，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。</p>\n<p>另外，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p>\n<p>从上面的介绍中我们知道程序计数器主要有两个作用：</p>\n<p>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。<br>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。<br>注意：程序计数器是唯一一个不会出现 OutOfMemoryError 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</p>\n<h3 id=\"Java虚拟栈\"><a href=\"#Java虚拟栈\" class=\"headerlink\" title=\"Java虚拟栈\"></a>Java虚拟栈</h3><p>Java 虚拟机栈描述的是 Java 方法执行的线程内存模型：方法执行时，JVM 会同步创建一个栈帧，用来存储局部变量表、操作数栈、动态连接等。</p>\n<blockquote>\n<p>Java 虚拟机栈会出现两种错误：StackOverFlowError 和 OutOfMemoryError。<br>StackOverFlowError： 若 Java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 StackOverFlowError 错误。<br>OutOfMemoryError： Java 虚拟机栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</p>\n</blockquote>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。（ 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。）</p>\n<p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p>\n<h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><p>Java 堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，Java 里“几乎”所有的对象实例都在这里分配内存。</p>\n<p>Java 堆是垃圾收集器管理的内存区域，因此一些资料中它也被称作“GC 堆”（Garbage Collected Heap）。从回收内存的角度看，由于现代垃圾收集器大部分都是基于分代收集理论设计的，所以 Java 堆中经常会出现新生代、老年代、Eden空间、From Survivor空间、To Survivor空间等名词，需要注意的是这种划分只是根据垃圾回收机制来进行的划分，不是 Java 虚拟机规范本身制定的。</p>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><p>方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</p>\n<p>方法区也被称为永久代。很多人都会分不清方法区和永久代的关系，为此我也查阅了文献。</p>\n<p><strong>方法区和永久代的关系</strong></p>\n<blockquote>\n<p>《Java 虚拟机规范》只是规定了有方法区这么个概念和它的作用，并没有规定如何去实现它。那么，在不同的 JVM 上方法区的实现肯定是不同的了。 方法区和永久代的关系很像 Java 中接口和类的关系，类实现了接口，而永久代就是 HotSpot 虚拟机对虚拟机规范中方法区的一种实现方式。 也就是说，永久代是 HotSpot 的概念，方法区是 Java 虚拟机规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚拟机实现并没有永久代这一说法。</p>\n</blockquote>\n<p><strong>常用参数</strong></p>\n<p>JDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-XX:PermSize=N <span class=\"comment\">//方法区 (永久代) 初始大小</span></span><br><span class=\"line\">-XX:MaxPermSize=N <span class=\"comment\">//方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen</span></span><br></pre></td></tr></table></figure>\n<p>相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。</p>\n<p>JDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是直接内存。</p>\n<p>下面是一些常用参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-XX:MetaspaceSize=N <span class=\"comment\">//设置 Metaspace 的初始（和最小大小）</span></span><br><span class=\"line\">-XX:MaxMetaspaceSize=N <span class=\"comment\">//设置 Metaspace 的最大大小</span></span><br></pre></td></tr></table></figure>\n<p>与永久代很大的不同就是，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。</p>\n<p><strong>为什么要将永久代 (PermGen) 替换为元空间 (MetaSpace) 呢?</strong></p>\n<p>1.整个永久代有一个 JVM 本身设置的固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，虽然元空间仍旧可能溢出，但是比原来出现的几率会更小。</p>\n<blockquote>\n<p>当元空间溢出时会得到如下错误： java.lang.OutOfMemoryError: MetaSpace</p>\n</blockquote>\n<p>你可以使用 -XX：MaxMetaspaceSize 标志设置最大元空间大小，默认值为 unlimited，这意味着它只受系统内存的限制。-XX：MetaspaceSize 调整标志定义元空间的初始大小如果未指定此标志，则 Metaspace 将根据运行时的应用程序需求动态地重新调整大小。</p>\n<p>2.元空间里面存放的是类的元数据，这样加载多少类的元数据就不由 MaxPermSize 控制了, 而由系统的实际可用空间来控制，这样能加载的类就更多了。</p>\n<p>3.在 JDK8，合并 HotSpot 和 JRockit 的代码时, JRockit 从来没有一个叫永久代的东西, 合并之后就没有必要额外的设置这么一个永久代的地方了。</p>\n<p>下图来自《深入理解 Java 虚拟机》第 3 版 2.2.5<br><img src=\"/2022/03/21/jvm/metaSpace.png\" alt=\"MetaSpace\"></p>\n<h3 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h3><p>运行时常量池是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池表（用于存放编译期生成的各种字面量和符号引用）</p>\n<p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 错误。</p>\n<p>JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区的实现为永久代<br>JDK1.7 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代 。<br>JDK1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(Metaspace)</p>\n<h3 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h3><p>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。</p>\n<h2 id=\"对象的创建过程\"><a href=\"#对象的创建过程\" class=\"headerlink\" title=\"对象的创建过程\"></a>对象的创建过程</h2><p>new一个新的对象，首先查看类是否加载<br>如果已经加载 =&gt; 分配内存空间 =&gt; 实例变量赋默认值 =&gt; 设置对象头 =&gt; 执行初始化方法<br>未加载 =&gt; 类加载 =&gt; 连接（验证=&gt;准备=&gt;解析）=&gt; 初始化</p>\n<blockquote>\n<p>分配内存空间：</p>\n</blockquote>\n<ol>\n<li>指针碰撞，用</li>\n<li>空闲列表</li>\n</ol>\n<h2 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h2><p>加载 =&gt;  连接（验证=&gt;准备=&gt;解析）=&gt; 初始化 =&gt; 使用 =&gt; 卸载<br><strong>加载</strong></p>\n<ol>\n<li>将字节码转成二进制字节流</li>\n<li>二进制字节流所代表的静态存储结构转换到方法去的运行时数据结构</li>\n<li>在内存生成class对象</li>\n</ol>\n<p><strong>验证</strong></p>\n<ol>\n<li>文件格式验证：验证字节流是否符合class文件格式规范</li>\n<li>元数据验证：如此类是否有父类，收否继承了不允许被继承的累</li>\n<li>字节码验证</li>\n<li>符号引用验证</li>\n</ol>\n<p><strong>准备</strong><br>为静态变量，常量分配内存并赋默认值（实例变量会在对象实例化时随对象分配在java堆中）</p>\n<p><strong>解析</strong><br>把常量池中符号引用（符号描述引用目标）转换成直接引用（指向目标的指针或句柄）</p>\n<p><strong>初始化</strong><br>执行static代码块进行初始化，如果存在父类，先对父类进行初始化</p>\n<p><strong>卸载</strong><br>条件（如何判断一个类是无用的类）：</p>\n<ol>\n<li>该类的所有的实例对象都被GC(堆不存在该类的实例对象)</li>\n<li>该类没有再其他任何地方被引用</li>\n<li>该类的类加载器的实例已被GC</li>\n</ol>\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><p>Java类加载器从上至下为：</p>\n<ul>\n<li>bootstrap classloader   启动类加载器</li>\n<li>extension classloader   扩展类加载器</li>\n<li>application classloader 应用程序类加载器</li>\n<li>user classloader        用户自定义类加载器<br>加载类的时候自下而上查询父类加载器是否已加载当前类，如果没有从顶向下加载该类</li>\n</ul>\n<p><strong>什么场景需要自定义user classloader</strong></p>\n<ul>\n<li>隔离加载器：在框架内进行中间件与应用的模块隔离，把类加载到不同的环境</li>\n<li>修改类加载的方式</li>\n<li>扩展加载源</li>\n<li>防止源码泄露：java代码容易被编译和篡改，可以进行编译加密 =&gt; 自定义累加器还原加密字节码</li>\n</ul>\n<h2 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h2><p><img src=\"/2022/03/21/jvm/java_heap.png\" alt=\"Java Heap\"></p>\n<h2 id=\"如何判断对象是否死亡\"><a href=\"#如何判断对象是否死亡\" class=\"headerlink\" title=\"如何判断对象是否死亡\"></a>如何判断对象是否死亡</h2><ol>\n<li>引用计数法<br>引用=&gt; count+1; 引用结束=&gt; count-1; 如果count=0=&gt;无引用。但是无法解决循环引用的问题</li>\n<li>可达性分析<br>如果GC root到对应有引用链路说明该对象可达，如果没有可达引用链，则死亡</li>\n</ol>\n<p><strong>可作为GC root的对象</strong></p>\n<ol>\n<li>虚拟机栈中引用对象</li>\n<li>本地native方法引用对象</li>\n<li>方法区静态属性引用对象</li>\n<li>被同步锁持有的对象</li>\n</ol>\n<h2 id=\"简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。\"><a href=\"#简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。\" class=\"headerlink\" title=\"简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。\"></a>简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。</h2><ol>\n<li>强引用 内存不够都不会被回收的引用对象，会抛出OOM</li>\n<li>软引用 内存不够会被回收的引用对象</li>\n<li>弱引用 不管内存够不够， gc都会回收的引用对象</li>\n<li>虚引用 用于跟踪对象被垃圾回收的活动，一般和引用队列联合使用</li>\n</ol>\n<h2 id=\"垃圾收集有哪些算法，各自的特点？\"><a href=\"#垃圾收集有哪些算法，各自的特点？\" class=\"headerlink\" title=\"垃圾收集有哪些算法，各自的特点？\"></a>垃圾收集有哪些算法，各自的特点？</h2><ol>\n<li>标记 - 清除 通过GC root标记还存活的对象，然后清楚未被标记的对象。<br>问题： 空间碎片</li>\n<li>标记 - 复制 复制存活的对象到另一块区域，然后整片清空原区域，解决了空间碎片的问题</li>\n<li>标记 - 整理 标记所有存货的对象，把标记对象往一端移动<h2 id=\"HotSpot-为什么要分为新生代和老年代？\"><a href=\"#HotSpot-为什么要分为新生代和老年代？\" class=\"headerlink\" title=\"HotSpot 为什么要分为新生代和老年代？\"></a>HotSpot 为什么要分为新生代和老年代？</h2><h2 id=\"常见的垃圾回收器有哪些？\"><a href=\"#常见的垃圾回收器有哪些？\" class=\"headerlink\" title=\"常见的垃圾回收器有哪些？\"></a>常见的垃圾回收器有哪些？</h2>serial<br>parallel<br>CMS<br>G1<h3 id=\"介绍一下-CMS-G1-收集器。\"><a href=\"#介绍一下-CMS-G1-收集器。\" class=\"headerlink\" title=\"介绍一下 CMS,G1 收集器。\"></a>介绍一下 CMS,G1 收集器。</h3>CMS</li>\n</ol>\n<ul>\n<li>初始标记：寻找GC root直接关联的对象 STW</li>\n<li>并发标记存活对象</li>\n<li>重新标记， STW (修正并发标记期间因用户线程产生变动的对象)</li>\n<li>并发清除<br>缺点： 碎片空间, 无法清理浮动垃圾；对CPU资源敏感<br>G1：Garbage first</li>\n<li>把区域分成几个region</li>\n<li>初始标记 STW</li>\n<li>并发标记</li>\n<li>最终标记 STW</li>\n<li>筛选回收 STW, 会根据用户设置的停顿注定回收计划（维护一个优先列表，每次根据允许的收集事件优先选择回收价值最大的region), 需要回收的region中的存活对象复制到空的region，同时清理旧的region。<h2 id=\"Minor-GC-和-Full-GC-有什么不同呢？\"><a href=\"#Minor-GC-和-Full-GC-有什么不同呢？\" class=\"headerlink\" title=\"Minor GC 和 Full GC 有什么不同呢？\"></a>Minor GC 和 Full GC 有什么不同呢？</h2>Eden区满了之后会触发Minor GC，把存活的对象放到Survivor0, Survivor0满了之后会触发Minor GC，会把存活的对象放到Survivor1，然后from和to指针会交换。<br>老年代占满了就会触发Full GC，Full GC包括新生代和老年代的GC<br>老年代空间不足的情况：</li>\n</ul>\n<ol>\n<li>占用内存过大的对象会直接保存到老年代，但这个时候老年代空间不足</li>\n<li>promotion failure: Survivor区存活的对象年龄达到设定值，会将对象拷贝到老年代<h2 id=\"频繁Full-GC\"><a href=\"#频繁Full-GC\" class=\"headerlink\" title=\"频繁Full GC\"></a>频繁Full GC</h2></li>\n</ol>\n<h2 id=\"JVM调优\"><a href=\"#JVM调优\" class=\"headerlink\" title=\"JVM调优\"></a>JVM调优</h2>","site":{"data":{}},"excerpt":"<p>JVM(Java Virtual Machine) - Java 虚拟机，它是 Java 实现平台无关性的基石。</p>\n<p>Java 程序运行的时候，编译器将 Java 文件编译成平台无关的 Java 字节码文件（.class）,接下来对应平台 JVM 对字节码文件进行解释，翻译成对应平台匹配的机器指令并运行。</p>","more":"<h2 id=\"JVM-内存区域\"><a href=\"#JVM-内存区域\" class=\"headerlink\" title=\"JVM 内存区域\"></a>JVM 内存区域</h2><p>Java 虚拟机在执行 Java 程序的过程中会把它管理的内存划分成若干个不同的数据区域。<br>JDK 1.6<br><img src=\"/2022/03/21/jvm/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8C%BA%E5%9F%9F_JDK1.6.png\" alt=\"JDK1.6 运行时数据区域\"><br>JDK 1.8<br><img src=\"/2022/03/21/jvm/%E8%BF%90%E8%A1%8C%E6%97%B6%E5%8C%BA%E5%9F%9F_JDK1.8.png\" alt=\"JDK1.8 运行时数据区域\"></p>\n<p>线程私有的：</p>\n<ul>\n<li>程序计数器</li>\n<li>虚拟机栈</li>\n<li>本地方法栈</li>\n</ul>\n<p>线程共享的：</p>\n<ul>\n<li>堆</li>\n<li>方法区</li>\n<li>直接内存 (非运行时数据区的一部分)</li>\n</ul>\n<h3 id=\"程序计数器\"><a href=\"#程序计数器\" class=\"headerlink\" title=\"程序计数器\"></a>程序计数器</h3><p>程序计数器是一块较小的内存空间，可以看作是当前线程所执行的字节码的行号指示器。<strong>字节码解释器工作时通过改变这个计数器的值来选取下一条需要执行的字节码指令</strong>，分支、循环、跳转、异常处理、线程恢复等功能都需要依赖这个计数器来完成。</p>\n<p>另外，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。</p>\n<p>从上面的介绍中我们知道程序计数器主要有两个作用：</p>\n<p>字节码解释器通过改变程序计数器来依次读取指令，从而实现代码的流程控制，如：顺序执行、选择、循环、异常处理。<br>在多线程的情况下，程序计数器用于记录当前线程执行的位置，从而当线程被切换回来的时候能够知道该线程上次运行到哪儿了。<br>注意：程序计数器是唯一一个不会出现 OutOfMemoryError 的内存区域，它的生命周期随着线程的创建而创建，随着线程的结束而死亡。</p>\n<h3 id=\"Java虚拟栈\"><a href=\"#Java虚拟栈\" class=\"headerlink\" title=\"Java虚拟栈\"></a>Java虚拟栈</h3><p>Java 虚拟机栈描述的是 Java 方法执行的线程内存模型：方法执行时，JVM 会同步创建一个栈帧，用来存储局部变量表、操作数栈、动态连接等。</p>\n<blockquote>\n<p>Java 虚拟机栈会出现两种错误：StackOverFlowError 和 OutOfMemoryError。<br>StackOverFlowError： 若 Java 虚拟机栈的内存大小不允许动态扩展，那么当线程请求栈的深度超过当前 Java 虚拟机栈的最大深度的时候，就抛出 StackOverFlowError 错误。<br>OutOfMemoryError： Java 虚拟机栈的内存大小可以动态扩展， 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OutOfMemoryError异常。</p>\n</blockquote>\n<h3 id=\"本地方法栈\"><a href=\"#本地方法栈\" class=\"headerlink\" title=\"本地方法栈\"></a>本地方法栈</h3><p>虚拟机栈为虚拟机执行 Java 方法 （也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。（ 在 HotSpot 虚拟机中和 Java 虚拟机栈合二为一。）</p>\n<p>本地方法被执行的时候，在本地方法栈也会创建一个栈帧，用于存放该本地方法的局部变量表、操作数栈、动态链接、出口信息。</p>\n<h3 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h3><p>Java 堆（Java Heap）是虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，Java 里“几乎”所有的对象实例都在这里分配内存。</p>\n<p>Java 堆是垃圾收集器管理的内存区域，因此一些资料中它也被称作“GC 堆”（Garbage Collected Heap）。从回收内存的角度看，由于现代垃圾收集器大部分都是基于分代收集理论设计的，所以 Java 堆中经常会出现新生代、老年代、Eden空间、From Survivor空间、To Survivor空间等名词，需要注意的是这种划分只是根据垃圾回收机制来进行的划分，不是 Java 虚拟机规范本身制定的。</p>\n<h3 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h3><p>方法区与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。</p>\n<p>方法区也被称为永久代。很多人都会分不清方法区和永久代的关系，为此我也查阅了文献。</p>\n<p><strong>方法区和永久代的关系</strong></p>\n<blockquote>\n<p>《Java 虚拟机规范》只是规定了有方法区这么个概念和它的作用，并没有规定如何去实现它。那么，在不同的 JVM 上方法区的实现肯定是不同的了。 方法区和永久代的关系很像 Java 中接口和类的关系，类实现了接口，而永久代就是 HotSpot 虚拟机对虚拟机规范中方法区的一种实现方式。 也就是说，永久代是 HotSpot 的概念，方法区是 Java 虚拟机规范中的定义，是一种规范，而永久代是一种实现，一个是标准一个是实现，其他的虚拟机实现并没有永久代这一说法。</p>\n</blockquote>\n<p><strong>常用参数</strong></p>\n<p>JDK 1.8 之前永久代还没被彻底移除的时候通常通过下面这些参数来调节方法区大小</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-XX:PermSize=N <span class=\"comment\">//方法区 (永久代) 初始大小</span></span><br><span class=\"line\">-XX:MaxPermSize=N <span class=\"comment\">//方法区 (永久代) 最大大小,超过这个值将会抛出 OutOfMemoryError 异常:java.lang.OutOfMemoryError: PermGen</span></span><br></pre></td></tr></table></figure>\n<p>相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入方法区后就“永久存在”了。</p>\n<p>JDK 1.8 的时候，方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是直接内存。</p>\n<p>下面是一些常用参数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-XX:MetaspaceSize=N <span class=\"comment\">//设置 Metaspace 的初始（和最小大小）</span></span><br><span class=\"line\">-XX:MaxMetaspaceSize=N <span class=\"comment\">//设置 Metaspace 的最大大小</span></span><br></pre></td></tr></table></figure>\n<p>与永久代很大的不同就是，如果不指定大小的话，随着更多类的创建，虚拟机会耗尽所有可用的系统内存。</p>\n<p><strong>为什么要将永久代 (PermGen) 替换为元空间 (MetaSpace) 呢?</strong></p>\n<p>1.整个永久代有一个 JVM 本身设置的固定大小上限，无法进行调整，而元空间使用的是直接内存，受本机可用内存的限制，虽然元空间仍旧可能溢出，但是比原来出现的几率会更小。</p>\n<blockquote>\n<p>当元空间溢出时会得到如下错误： java.lang.OutOfMemoryError: MetaSpace</p>\n</blockquote>\n<p>你可以使用 -XX：MaxMetaspaceSize 标志设置最大元空间大小，默认值为 unlimited，这意味着它只受系统内存的限制。-XX：MetaspaceSize 调整标志定义元空间的初始大小如果未指定此标志，则 Metaspace 将根据运行时的应用程序需求动态地重新调整大小。</p>\n<p>2.元空间里面存放的是类的元数据，这样加载多少类的元数据就不由 MaxPermSize 控制了, 而由系统的实际可用空间来控制，这样能加载的类就更多了。</p>\n<p>3.在 JDK8，合并 HotSpot 和 JRockit 的代码时, JRockit 从来没有一个叫永久代的东西, 合并之后就没有必要额外的设置这么一个永久代的地方了。</p>\n<p>下图来自《深入理解 Java 虚拟机》第 3 版 2.2.5<br><img src=\"/2022/03/21/jvm/metaSpace.png\" alt=\"MetaSpace\"></p>\n<h3 id=\"运行时常量池\"><a href=\"#运行时常量池\" class=\"headerlink\" title=\"运行时常量池\"></a>运行时常量池</h3><p>运行时常量池是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有常量池表（用于存放编译期生成的各种字面量和符号引用）</p>\n<p>既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMemoryError 错误。</p>\n<p>JDK1.7 之前运行时常量池逻辑包含字符串常量池存放在方法区, 此时 hotspot 虚拟机对方法区的实现为永久代<br>JDK1.7 字符串常量池被从方法区拿到了堆中, 这里没有提到运行时常量池,也就是说字符串常量池被单独拿到堆,运行时常量池剩下的东西还在方法区, 也就是 hotspot 中的永久代 。<br>JDK1.8 hotspot 移除了永久代用元空间(Metaspace)取而代之, 这时候字符串常量池还在堆, 运行时常量池还在方法区, 只不过方法区的实现从永久代变成了元空间(Metaspace)</p>\n<h3 id=\"直接内存\"><a href=\"#直接内存\" class=\"headerlink\" title=\"直接内存\"></a>直接内存</h3><p>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。</p>\n<h2 id=\"对象的创建过程\"><a href=\"#对象的创建过程\" class=\"headerlink\" title=\"对象的创建过程\"></a>对象的创建过程</h2><p>new一个新的对象，首先查看类是否加载<br>如果已经加载 =&gt; 分配内存空间 =&gt; 实例变量赋默认值 =&gt; 设置对象头 =&gt; 执行初始化方法<br>未加载 =&gt; 类加载 =&gt; 连接（验证=&gt;准备=&gt;解析）=&gt; 初始化</p>\n<blockquote>\n<p>分配内存空间：</p>\n</blockquote>\n<ol>\n<li>指针碰撞，用</li>\n<li>空闲列表</li>\n</ol>\n<h2 id=\"类的生命周期\"><a href=\"#类的生命周期\" class=\"headerlink\" title=\"类的生命周期\"></a>类的生命周期</h2><p>加载 =&gt;  连接（验证=&gt;准备=&gt;解析）=&gt; 初始化 =&gt; 使用 =&gt; 卸载<br><strong>加载</strong></p>\n<ol>\n<li>将字节码转成二进制字节流</li>\n<li>二进制字节流所代表的静态存储结构转换到方法去的运行时数据结构</li>\n<li>在内存生成class对象</li>\n</ol>\n<p><strong>验证</strong></p>\n<ol>\n<li>文件格式验证：验证字节流是否符合class文件格式规范</li>\n<li>元数据验证：如此类是否有父类，收否继承了不允许被继承的累</li>\n<li>字节码验证</li>\n<li>符号引用验证</li>\n</ol>\n<p><strong>准备</strong><br>为静态变量，常量分配内存并赋默认值（实例变量会在对象实例化时随对象分配在java堆中）</p>\n<p><strong>解析</strong><br>把常量池中符号引用（符号描述引用目标）转换成直接引用（指向目标的指针或句柄）</p>\n<p><strong>初始化</strong><br>执行static代码块进行初始化，如果存在父类，先对父类进行初始化</p>\n<p><strong>卸载</strong><br>条件（如何判断一个类是无用的类）：</p>\n<ol>\n<li>该类的所有的实例对象都被GC(堆不存在该类的实例对象)</li>\n<li>该类没有再其他任何地方被引用</li>\n<li>该类的类加载器的实例已被GC</li>\n</ol>\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><p>Java类加载器从上至下为：</p>\n<ul>\n<li>bootstrap classloader   启动类加载器</li>\n<li>extension classloader   扩展类加载器</li>\n<li>application classloader 应用程序类加载器</li>\n<li>user classloader        用户自定义类加载器<br>加载类的时候自下而上查询父类加载器是否已加载当前类，如果没有从顶向下加载该类</li>\n</ul>\n<p><strong>什么场景需要自定义user classloader</strong></p>\n<ul>\n<li>隔离加载器：在框架内进行中间件与应用的模块隔离，把类加载到不同的环境</li>\n<li>修改类加载的方式</li>\n<li>扩展加载源</li>\n<li>防止源码泄露：java代码容易被编译和篡改，可以进行编译加密 =&gt; 自定义累加器还原加密字节码</li>\n</ul>\n<h2 id=\"垃圾回收\"><a href=\"#垃圾回收\" class=\"headerlink\" title=\"垃圾回收\"></a>垃圾回收</h2><p><img src=\"/2022/03/21/jvm/java_heap.png\" alt=\"Java Heap\"></p>\n<h2 id=\"如何判断对象是否死亡\"><a href=\"#如何判断对象是否死亡\" class=\"headerlink\" title=\"如何判断对象是否死亡\"></a>如何判断对象是否死亡</h2><ol>\n<li>引用计数法<br>引用=&gt; count+1; 引用结束=&gt; count-1; 如果count=0=&gt;无引用。但是无法解决循环引用的问题</li>\n<li>可达性分析<br>如果GC root到对应有引用链路说明该对象可达，如果没有可达引用链，则死亡</li>\n</ol>\n<p><strong>可作为GC root的对象</strong></p>\n<ol>\n<li>虚拟机栈中引用对象</li>\n<li>本地native方法引用对象</li>\n<li>方法区静态属性引用对象</li>\n<li>被同步锁持有的对象</li>\n</ol>\n<h2 id=\"简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。\"><a href=\"#简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。\" class=\"headerlink\" title=\"简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。\"></a>简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。</h2><ol>\n<li>强引用 内存不够都不会被回收的引用对象，会抛出OOM</li>\n<li>软引用 内存不够会被回收的引用对象</li>\n<li>弱引用 不管内存够不够， gc都会回收的引用对象</li>\n<li>虚引用 用于跟踪对象被垃圾回收的活动，一般和引用队列联合使用</li>\n</ol>\n<h2 id=\"垃圾收集有哪些算法，各自的特点？\"><a href=\"#垃圾收集有哪些算法，各自的特点？\" class=\"headerlink\" title=\"垃圾收集有哪些算法，各自的特点？\"></a>垃圾收集有哪些算法，各自的特点？</h2><ol>\n<li>标记 - 清除 通过GC root标记还存活的对象，然后清楚未被标记的对象。<br>问题： 空间碎片</li>\n<li>标记 - 复制 复制存活的对象到另一块区域，然后整片清空原区域，解决了空间碎片的问题</li>\n<li>标记 - 整理 标记所有存货的对象，把标记对象往一端移动<h2 id=\"HotSpot-为什么要分为新生代和老年代？\"><a href=\"#HotSpot-为什么要分为新生代和老年代？\" class=\"headerlink\" title=\"HotSpot 为什么要分为新生代和老年代？\"></a>HotSpot 为什么要分为新生代和老年代？</h2><h2 id=\"常见的垃圾回收器有哪些？\"><a href=\"#常见的垃圾回收器有哪些？\" class=\"headerlink\" title=\"常见的垃圾回收器有哪些？\"></a>常见的垃圾回收器有哪些？</h2>serial<br>parallel<br>CMS<br>G1<h3 id=\"介绍一下-CMS-G1-收集器。\"><a href=\"#介绍一下-CMS-G1-收集器。\" class=\"headerlink\" title=\"介绍一下 CMS,G1 收集器。\"></a>介绍一下 CMS,G1 收集器。</h3>CMS</li>\n</ol>\n<ul>\n<li>初始标记：寻找GC root直接关联的对象 STW</li>\n<li>并发标记存活对象</li>\n<li>重新标记， STW (修正并发标记期间因用户线程产生变动的对象)</li>\n<li>并发清除<br>缺点： 碎片空间, 无法清理浮动垃圾；对CPU资源敏感<br>G1：Garbage first</li>\n<li>把区域分成几个region</li>\n<li>初始标记 STW</li>\n<li>并发标记</li>\n<li>最终标记 STW</li>\n<li>筛选回收 STW, 会根据用户设置的停顿注定回收计划（维护一个优先列表，每次根据允许的收集事件优先选择回收价值最大的region), 需要回收的region中的存活对象复制到空的region，同时清理旧的region。<h2 id=\"Minor-GC-和-Full-GC-有什么不同呢？\"><a href=\"#Minor-GC-和-Full-GC-有什么不同呢？\" class=\"headerlink\" title=\"Minor GC 和 Full GC 有什么不同呢？\"></a>Minor GC 和 Full GC 有什么不同呢？</h2>Eden区满了之后会触发Minor GC，把存活的对象放到Survivor0, Survivor0满了之后会触发Minor GC，会把存活的对象放到Survivor1，然后from和to指针会交换。<br>老年代占满了就会触发Full GC，Full GC包括新生代和老年代的GC<br>老年代空间不足的情况：</li>\n</ul>\n<ol>\n<li>占用内存过大的对象会直接保存到老年代，但这个时候老年代空间不足</li>\n<li>promotion failure: Survivor区存活的对象年龄达到设定值，会将对象拷贝到老年代<h2 id=\"频繁Full-GC\"><a href=\"#频繁Full-GC\" class=\"headerlink\" title=\"频繁Full GC\"></a>频繁Full GC</h2></li>\n</ol>\n<h2 id=\"JVM调优\"><a href=\"#JVM调优\" class=\"headerlink\" title=\"JVM调优\"></a>JVM调优</h2>"},{"title":"Leetcode 31 下一个排列","date":"2020-02-17T11:10:18.000Z","_content":"## 题目\n整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。\n<!--more-->\n- 例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。\n整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。\n\n- 例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。\n- 类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。\n而-  arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。\n给你一个整数数组 nums ，找出 nums 的下一个排列。\n\n必须 原地 修改，只允许使用额外常数空间。\n\n## 算法\n1. 从后向前查找第一个相邻升序的元素对(i，j), A[i] < A[j] =>(j,end)必然降序 (无升序元素对=>[begin,end]降序，直接步骤4逆转)\n2. 在[j,end) 从后向前找第一个满足A[k] > A[i]\n3. 交换A[i],A[k] => (j,end)必然降序\n4. 逆转(j,end)\n\n![](step1.png)\n![](step2.png)\n![](step3.png)\n![](step4.png)\n\n## code\n```java\nclass Solution {\n    public void nextPermutation(int[] nums) {\n        int len = nums.length;\n        if(len<=1) return;\n        int j = len-1;\n        int i = j-1;\n        while(i>=0 && nums[i]>=nums[j]) {\n            i--;\n            j--;\n        }\n        if(i>=0) {\n            int k=len-1;\n            while(k>j && nums[k]<=nums[i]) {\n                k--;\n            }\n            swap(nums, i, k);\n        }\n\n        reverse(nums, j, len-1);\n    }\n\n    private void reverse(int[] nums, int begin, int end) {\n        int len = end-begin+1;\n        if(len == 1) return;\n        int start = len/2+len%2+begin;\n        while (start<=end) {\n            swap(nums, start, begin+end-start);\n            start++;\n        }\n    }\n\n    private void swap(int[] nums, int i, int j) {\n        int tmp = nums[i];\n        nums[i]=nums[j];\n        nums[j]=tmp;\n    }\n}\n```","source":"_posts/next-permutation.md","raw":"---\ntitle: Leetcode 31 下一个排列\ndate: 2020-02-17 19:10:18\ntags:\ncategories:\n  - 算法\n---\n## 题目\n整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。\n<!--more-->\n- 例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。\n整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。\n\n- 例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。\n- 类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。\n而-  arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。\n给你一个整数数组 nums ，找出 nums 的下一个排列。\n\n必须 原地 修改，只允许使用额外常数空间。\n\n## 算法\n1. 从后向前查找第一个相邻升序的元素对(i，j), A[i] < A[j] =>(j,end)必然降序 (无升序元素对=>[begin,end]降序，直接步骤4逆转)\n2. 在[j,end) 从后向前找第一个满足A[k] > A[i]\n3. 交换A[i],A[k] => (j,end)必然降序\n4. 逆转(j,end)\n\n![](step1.png)\n![](step2.png)\n![](step3.png)\n![](step4.png)\n\n## code\n```java\nclass Solution {\n    public void nextPermutation(int[] nums) {\n        int len = nums.length;\n        if(len<=1) return;\n        int j = len-1;\n        int i = j-1;\n        while(i>=0 && nums[i]>=nums[j]) {\n            i--;\n            j--;\n        }\n        if(i>=0) {\n            int k=len-1;\n            while(k>j && nums[k]<=nums[i]) {\n                k--;\n            }\n            swap(nums, i, k);\n        }\n\n        reverse(nums, j, len-1);\n    }\n\n    private void reverse(int[] nums, int begin, int end) {\n        int len = end-begin+1;\n        if(len == 1) return;\n        int start = len/2+len%2+begin;\n        while (start<=end) {\n            swap(nums, start, begin+end-start);\n            start++;\n        }\n    }\n\n    private void swap(int[] nums, int i, int j) {\n        int tmp = nums[i];\n        nums[i]=nums[j];\n        nums[j]=tmp;\n    }\n}\n```","slug":"next-permutation","published":1,"updated":"2022-03-20T09:16:27.374Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2gbadmy000p0epl9sfk5z88","content":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。</p>\n<span id=\"more\"></span>\n<ul>\n<li><p>例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。<br>整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。</p>\n</li>\n<li><p>例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。</p>\n</li>\n<li><p>类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。<br>而-  arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。<br>给你一个整数数组 nums ，找出 nums 的下一个排列。</p>\n</li>\n</ul>\n<p>必须 原地 修改，只允许使用额外常数空间。</p>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ol>\n<li>从后向前查找第一个相邻升序的元素对(i，j), A[i] &lt; A[j] =&gt;(j,end)必然降序 (无升序元素对=&gt;[begin,end]降序，直接步骤4逆转)</li>\n<li>在[j,end) 从后向前找第一个满足A[k] &gt; A[i]</li>\n<li>交换A[i],A[k] =&gt; (j,end)必然降序</li>\n<li>逆转(j,end)</li>\n</ol>\n<p><img src=\"/2020/02/17/next-permutation/step1.png\"><br><img src=\"/2020/02/17/next-permutation/step2.png\"><br><img src=\"/2020/02/17/next-permutation/step3.png\"><br><img src=\"/2020/02/17/next-permutation/step4.png\"></p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nextPermutation</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len&lt;=<span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> len-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> j-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&gt;=<span class=\"number\">0</span> &amp;&amp; nums[i]&gt;=nums[j]) &#123;</span><br><span class=\"line\">            i--;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> k=len-<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(k&gt;j &amp;&amp; nums[k]&lt;=nums[i]) &#123;</span><br><span class=\"line\">                k--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(nums, i, k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        reverse(nums, j, len-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reverse</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> begin, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> end-begin+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len == <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> len/<span class=\"number\">2</span>+len%<span class=\"number\">2</span>+begin;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start&lt;=end) &#123;</span><br><span class=\"line\">            swap(nums, start, begin+end-start);</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">        nums[i]=nums[j];</span><br><span class=\"line\">        nums[j]=tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h2><p>整数数组的一个 排列  就是将其所有成员以序列或线性顺序排列。</p>","more":"<ul>\n<li><p>例如，arr = [1,2,3] ，以下这些都可以视作 arr 的排列：[1,2,3]、[1,3,2]、[3,1,2]、[2,3,1] 。<br>整数数组的 下一个排列 是指其整数的下一个字典序更大的排列。更正式地，如果数组的所有排列根据其字典顺序从小到大排列在一个容器中，那么数组的 下一个排列 就是在这个有序容器中排在它后面的那个排列。如果不存在下一个更大的排列，那么这个数组必须重排为字典序最小的排列（即，其元素按升序排列）。</p>\n</li>\n<li><p>例如，arr = [1,2,3] 的下一个排列是 [1,3,2] 。</p>\n</li>\n<li><p>类似地，arr = [2,3,1] 的下一个排列是 [3,1,2] 。<br>而-  arr = [3,2,1] 的下一个排列是 [1,2,3] ，因为 [3,2,1] 不存在一个字典序更大的排列。<br>给你一个整数数组 nums ，找出 nums 的下一个排列。</p>\n</li>\n</ul>\n<p>必须 原地 修改，只允许使用额外常数空间。</p>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ol>\n<li>从后向前查找第一个相邻升序的元素对(i，j), A[i] &lt; A[j] =&gt;(j,end)必然降序 (无升序元素对=&gt;[begin,end]降序，直接步骤4逆转)</li>\n<li>在[j,end) 从后向前找第一个满足A[k] &gt; A[i]</li>\n<li>交换A[i],A[k] =&gt; (j,end)必然降序</li>\n<li>逆转(j,end)</li>\n</ol>\n<p><img src=\"/2020/02/17/next-permutation/step1.png\"><br><img src=\"/2020/02/17/next-permutation/step2.png\"><br><img src=\"/2020/02/17/next-permutation/step3.png\"><br><img src=\"/2020/02/17/next-permutation/step4.png\"></p>\n<h2 id=\"code\"><a href=\"#code\" class=\"headerlink\" title=\"code\"></a>code</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Solution</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">nextPermutation</span><span class=\"params\">(<span class=\"type\">int</span>[] nums)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> nums.length;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len&lt;=<span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> len-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> j-<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(i&gt;=<span class=\"number\">0</span> &amp;&amp; nums[i]&gt;=nums[j]) &#123;</span><br><span class=\"line\">            i--;</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i&gt;=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> k=len-<span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(k&gt;j &amp;&amp; nums[k]&lt;=nums[i]) &#123;</span><br><span class=\"line\">                k--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            swap(nums, i, k);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        reverse(nums, j, len-<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">reverse</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> begin, <span class=\"type\">int</span> end)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> end-begin+<span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(len == <span class=\"number\">1</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> len/<span class=\"number\">2</span>+len%<span class=\"number\">2</span>+begin;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (start&lt;=end) &#123;</span><br><span class=\"line\">            swap(nums, start, begin+end-start);</span><br><span class=\"line\">            start++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">swap</span><span class=\"params\">(<span class=\"type\">int</span>[] nums, <span class=\"type\">int</span> i, <span class=\"type\">int</span> j)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">tmp</span> <span class=\"operator\">=</span> nums[i];</span><br><span class=\"line\">        nums[i]=nums[j];</span><br><span class=\"line\">        nums[j]=tmp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"spring","date":"2022-03-27T15:28:50.000Z","_content":"## Spring如何解决循环依赖\n\n## Spring的AOP有几种实现方式\n","source":"_posts/spring.md","raw":"---\ntitle: spring\ndate: 2022-03-27 23:28:50\ntags:\ncategories:\n  - spring\n---\n## Spring如何解决循环依赖\n\n## Spring的AOP有几种实现方式\n","slug":"spring","published":1,"updated":"2022-03-28T13:27:03.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl2gbadmy000q0epl6sbletpa","content":"<h2 id=\"Spring如何解决循环依赖\"><a href=\"#Spring如何解决循环依赖\" class=\"headerlink\" title=\"Spring如何解决循环依赖\"></a>Spring如何解决循环依赖</h2><h2 id=\"Spring的AOP有几种实现方式\"><a href=\"#Spring的AOP有几种实现方式\" class=\"headerlink\" title=\"Spring的AOP有几种实现方式\"></a>Spring的AOP有几种实现方式</h2>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Spring如何解决循环依赖\"><a href=\"#Spring如何解决循环依赖\" class=\"headerlink\" title=\"Spring如何解决循环依赖\"></a>Spring如何解决循环依赖</h2><h2 id=\"Spring的AOP有几种实现方式\"><a href=\"#Spring的AOP有几种实现方式\" class=\"headerlink\" title=\"Spring的AOP有几种实现方式\"></a>Spring的AOP有几种实现方式</h2>"}],"PostAsset":[{"_id":"source/_posts/javaBasis/IO.png","post":"cl2gbadmf00060epl60pp4bss","slug":"IO.png","modified":1,"renderable":1},{"_id":"source/_posts/javaBasis/compile.png","post":"cl2gbadmf00060epl60pp4bss","slug":"compile.png","modified":1,"renderable":1},{"_id":"source/_posts/javaBasis/error_exception.webp","post":"cl2gbadmf00060epl60pp4bss","slug":"error_exception.webp","modified":1,"renderable":1},{"_id":"source/_posts/javaBasis/jvm_jdk_jre.png","post":"cl2gbadmf00060epl60pp4bss","slug":"jvm_jdk_jre.png","modified":1,"renderable":1},{"_id":"source/_posts/jvm/java_heap.png","post":"cl2gbadmx000o0eplepy143l2","slug":"java_heap.png","modified":1,"renderable":1},{"_id":"source/_posts/jvm/metaSpace.png","post":"cl2gbadmx000o0eplepy143l2","slug":"metaSpace.png","modified":1,"renderable":1},{"_id":"source/_posts/jvm/运行时区域_JDK1.6.png","post":"cl2gbadmx000o0eplepy143l2","slug":"运行时区域_JDK1.6.png","modified":1,"renderable":1},{"_id":"source/_posts/jvm/运行时区域_JDK1.8.png","post":"cl2gbadmx000o0eplepy143l2","slug":"运行时区域_JDK1.8.png","modified":1,"renderable":1},{"_id":"source/_posts/next-permutation/step1.png","post":"cl2gbadmy000p0epl9sfk5z88","slug":"step1.png","modified":1,"renderable":1},{"_id":"source/_posts/next-permutation/step2.png","post":"cl2gbadmy000p0epl9sfk5z88","slug":"step2.png","modified":1,"renderable":1},{"_id":"source/_posts/next-permutation/step3.png","post":"cl2gbadmy000p0epl9sfk5z88","slug":"step3.png","modified":1,"renderable":1},{"_id":"source/_posts/next-permutation/step4.png","post":"cl2gbadmy000p0epl9sfk5z88","slug":"step4.png","modified":1,"renderable":1},{"_id":"source/_posts/next-permutation/step5.png","post":"cl2gbadmy000p0epl9sfk5z88","slug":"step5.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cl2gbadmf00060epl60pp4bss","category_id":"cl2gbadmd00040epldyz63c7z","_id":"cl2gbadmi000c0epl1k9t76v1"},{"post_id":"cl2gbadma00010epl6jmo34r7","category_id":"cl2gbadmd00040epldyz63c7z","_id":"cl2gbadmi000f0epl08ec6mb1"},{"post_id":"cl2gbadmc00030eplfah2b5ah","category_id":"cl2gbadmg00090epleofubkmn","_id":"cl2gbadmi000g0epl0nxt3pm5"},{"post_id":"cl2gbadme00050epl1cao9829","category_id":"cl2gbadmi000d0epl8q3xhw4h","_id":"cl2gbadmj000i0eplcohmh450"},{"post_id":"cl2gbadmh000a0eple27sgr8j","category_id":"cl2gbadmi000h0epl4phk8ew6","_id":"cl2gbadmj000k0eplajpc7i8a"},{"post_id":"cl2gbadmh000b0epl6j0e0szk","category_id":"cl2gbadmj000j0epl2agzamwp","_id":"cl2gbadmj000m0eplf1e088gc"},{"post_id":"cl2gbadmh000b0epl6j0e0szk","category_id":"cl2gbadmj000l0epl0u916cpc","_id":"cl2gbadmj000n0eplb5g123gp"},{"post_id":"cl2gbadmx000o0eplepy143l2","category_id":"cl2gbadmd00040epldyz63c7z","_id":"cl2gbadmz000r0epl2x9g9beu"},{"post_id":"cl2gbadmy000p0epl9sfk5z88","category_id":"cl2gbadmg00090epleofubkmn","_id":"cl2gbadmz000t0epledks3htt"},{"post_id":"cl2gbadmy000q0epl6sbletpa","category_id":"cl2gbadmz000s0epl8eyq1qrg","_id":"cl2gbadmz000u0eplduprg3bn"}],"PostTag":[{"post_id":"cl2gbadme00050epl1cao9829","tag_id":"cl2gbadmf00070epl2sg985ml","_id":"cl2gbadmi000e0epleas2aki2"}],"Tag":[{"name":"Hexo","_id":"cl2gbadmf00070epl2sg985ml"}]}}